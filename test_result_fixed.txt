[0;34m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━[0m
[0;34m🧪 Bloggy Test Runner (Docker)[0m
[0;34m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━[0m

[0;36m📋 Test Mode: Application Tests Only[0m
[0;36m📊 Coverage: Disabled[0m

[1;33m🔬 Running Application Tests...[0m
[0;34m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━[0m
[0;36m📝 Command: cd /app/runtime && pytest tests.py[0m

time="2025-10-12T18:28:00+13:00" level=warning msg="/Users/ed.sharood2/code/pybase/docker/docker-compose.yaml: the attribute `version` is obsolete, it will be ignored, please remove it to avoid potential confusion"
============================= test session starts ==============================
platform linux -- Python 3.12.12, pytest-8.4.2, pluggy-1.6.0
rootdir: /app/runtime
plugins: cov-7.0.0, asyncio-1.2.0, anyio-4.11.0
asyncio: mode=Mode.STRICT, debug=False, asyncio_default_fixture_loop_scope=None, asyncio_default_test_loop_scope=function
collected 83 items

tests.py EEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE [ 75%]
EEEEEEEEEEEEEEEEEEEE                                                     [100%]

==================================== ERRORS ====================================
_______________________ ERROR at setup of test_empty_db ________________________

request = <SubRequest '_prepare_db' for <Function test_empty_db>>

    @pytest.fixture(scope='module', autouse=True)
    def _prepare_db(request):
        # Setup test database - drop and recreate all tables
        with db.connection():
            # Get all table names from the database
            tables = db.tables
    
            # Drop all tables manually to ensure clean state
            for table in tables:
                try:
                    db.executesql(f'DROP TABLE IF EXISTS "{table}"')
                except:
                    pass
    
            # Commit the drops
            db.commit()
    
            # Now create fresh schema
            migration = generate_runtime_migration(db)
>           migration.up()

tests.py:51: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/utils.py:34: in up
    op.run()
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/operations.py:150: in run
    self.engine.create_table(self.table_name, self.columns, self.primary_keys, **self.kw)
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/engine.py:97: in create_table
    self._log_and_exec(sql)
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/engine.py:92: in _log_and_exec
    self.adapter.execute(sql)
/usr/local/lib/python3.12/site-packages/pydal/adapters/__init__.py:67: in wrap
    return f(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <emmett.orm.engines.sqlite.SQLite object at 0xffff905b5a30>
args = ('CREATE TABLE "auth_groups"(\n    "id" INTEGER PRIMARY KEY AUTOINCREMENT,\n    "created_at" TIMESTAMP,\n    "updated_at" TIMESTAMP,\n    "role" CHAR(255) DEFAULT \'\' UNIQUE,\n    "description" TEXT\n);',)
kwargs = {}
command = 'CREATE TABLE "auth_groups"(\n    "id" INTEGER PRIMARY KEY AUTOINCREMENT,\n    "created_at" TIMESTAMP,\n    "updated_at" TIMESTAMP,\n    "role" CHAR(255) DEFAULT \'\' UNIQUE,\n    "description" TEXT\n);'
handlers = []

    @with_connection_or_raise
    def execute(self, *args, **kwargs):
        command = self.filter_sql_command(args[0])
        handlers = self._build_handlers_for_execution()
        for handler in handlers:
            handler.before_execute(command)
>       rv = self.cursor.execute(command, *args[1:], **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       sqlite3.OperationalError: table "auth_groups" already exists

/usr/local/lib/python3.12/site-packages/pydal/adapters/base.py:410: OperationalError
_________________________ ERROR at setup of test_login _________________________

request = <SubRequest '_prepare_db' for <Function test_empty_db>>

    @pytest.fixture(scope='module', autouse=True)
    def _prepare_db(request):
        # Setup test database - drop and recreate all tables
        with db.connection():
            # Get all table names from the database
            tables = db.tables
    
            # Drop all tables manually to ensure clean state
            for table in tables:
                try:
                    db.executesql(f'DROP TABLE IF EXISTS "{table}"')
                except:
                    pass
    
            # Commit the drops
            db.commit()
    
            # Now create fresh schema
            migration = generate_runtime_migration(db)
>           migration.up()

tests.py:51: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/utils.py:34: in up
    op.run()
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/operations.py:150: in run
    self.engine.create_table(self.table_name, self.columns, self.primary_keys, **self.kw)
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/engine.py:97: in create_table
    self._log_and_exec(sql)
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/engine.py:92: in _log_and_exec
    self.adapter.execute(sql)
/usr/local/lib/python3.12/site-packages/pydal/adapters/__init__.py:67: in wrap
    return f(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <emmett.orm.engines.sqlite.SQLite object at 0xffff905b5a30>
args = ('CREATE TABLE "auth_groups"(\n    "id" INTEGER PRIMARY KEY AUTOINCREMENT,\n    "created_at" TIMESTAMP,\n    "updated_at" TIMESTAMP,\n    "role" CHAR(255) DEFAULT \'\' UNIQUE,\n    "description" TEXT\n);',)
kwargs = {}
command = 'CREATE TABLE "auth_groups"(\n    "id" INTEGER PRIMARY KEY AUTOINCREMENT,\n    "created_at" TIMESTAMP,\n    "updated_at" TIMESTAMP,\n    "role" CHAR(255) DEFAULT \'\' UNIQUE,\n    "description" TEXT\n);'
handlers = []

    @with_connection_or_raise
    def execute(self, *args, **kwargs):
        command = self.filter_sql_command(args[0])
        handlers = self._build_handlers_for_execution()
        for handler in handlers:
            handler.before_execute(command)
>       rv = self.cursor.execute(command, *args[1:], **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       sqlite3.OperationalError: table "auth_groups" already exists

/usr/local/lib/python3.12/site-packages/pydal/adapters/base.py:410: OperationalError
____________________ ERROR at setup of test_no_admin_access ____________________

request = <SubRequest '_prepare_db' for <Function test_empty_db>>

    @pytest.fixture(scope='module', autouse=True)
    def _prepare_db(request):
        # Setup test database - drop and recreate all tables
        with db.connection():
            # Get all table names from the database
            tables = db.tables
    
            # Drop all tables manually to ensure clean state
            for table in tables:
                try:
                    db.executesql(f'DROP TABLE IF EXISTS "{table}"')
                except:
                    pass
    
            # Commit the drops
            db.commit()
    
            # Now create fresh schema
            migration = generate_runtime_migration(db)
>           migration.up()

tests.py:51: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/utils.py:34: in up
    op.run()
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/operations.py:150: in run
    self.engine.create_table(self.table_name, self.columns, self.primary_keys, **self.kw)
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/engine.py:97: in create_table
    self._log_and_exec(sql)
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/engine.py:92: in _log_and_exec
    self.adapter.execute(sql)
/usr/local/lib/python3.12/site-packages/pydal/adapters/__init__.py:67: in wrap
    return f(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <emmett.orm.engines.sqlite.SQLite object at 0xffff905b5a30>
args = ('CREATE TABLE "auth_groups"(\n    "id" INTEGER PRIMARY KEY AUTOINCREMENT,\n    "created_at" TIMESTAMP,\n    "updated_at" TIMESTAMP,\n    "role" CHAR(255) DEFAULT \'\' UNIQUE,\n    "description" TEXT\n);',)
kwargs = {}
command = 'CREATE TABLE "auth_groups"(\n    "id" INTEGER PRIMARY KEY AUTOINCREMENT,\n    "created_at" TIMESTAMP,\n    "updated_at" TIMESTAMP,\n    "role" CHAR(255) DEFAULT \'\' UNIQUE,\n    "description" TEXT\n);'
handlers = []

    @with_connection_or_raise
    def execute(self, *args, **kwargs):
        command = self.filter_sql_command(args[0])
        handlers = self._build_handlers_for_execution()
        for handler in handlers:
            handler.before_execute(command)
>       rv = self.cursor.execute(command, *args[1:], **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       sqlite3.OperationalError: table "auth_groups" already exists

/usr/local/lib/python3.12/site-packages/pydal/adapters/base.py:410: OperationalError
_____________________ ERROR at setup of test_admin_access ______________________

request = <SubRequest '_prepare_db' for <Function test_empty_db>>

    @pytest.fixture(scope='module', autouse=True)
    def _prepare_db(request):
        # Setup test database - drop and recreate all tables
        with db.connection():
            # Get all table names from the database
            tables = db.tables
    
            # Drop all tables manually to ensure clean state
            for table in tables:
                try:
                    db.executesql(f'DROP TABLE IF EXISTS "{table}"')
                except:
                    pass
    
            # Commit the drops
            db.commit()
    
            # Now create fresh schema
            migration = generate_runtime_migration(db)
>           migration.up()

tests.py:51: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/utils.py:34: in up
    op.run()
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/operations.py:150: in run
    self.engine.create_table(self.table_name, self.columns, self.primary_keys, **self.kw)
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/engine.py:97: in create_table
    self._log_and_exec(sql)
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/engine.py:92: in _log_and_exec
    self.adapter.execute(sql)
/usr/local/lib/python3.12/site-packages/pydal/adapters/__init__.py:67: in wrap
    return f(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <emmett.orm.engines.sqlite.SQLite object at 0xffff905b5a30>
args = ('CREATE TABLE "auth_groups"(\n    "id" INTEGER PRIMARY KEY AUTOINCREMENT,\n    "created_at" TIMESTAMP,\n    "updated_at" TIMESTAMP,\n    "role" CHAR(255) DEFAULT \'\' UNIQUE,\n    "description" TEXT\n);',)
kwargs = {}
command = 'CREATE TABLE "auth_groups"(\n    "id" INTEGER PRIMARY KEY AUTOINCREMENT,\n    "created_at" TIMESTAMP,\n    "updated_at" TIMESTAMP,\n    "role" CHAR(255) DEFAULT \'\' UNIQUE,\n    "description" TEXT\n);'
handlers = []

    @with_connection_or_raise
    def execute(self, *args, **kwargs):
        command = self.filter_sql_command(args[0])
        handlers = self._build_handlers_for_execution()
        for handler in handlers:
            handler.before_execute(command)
>       rv = self.cursor.execute(command, *args[1:], **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       sqlite3.OperationalError: table "auth_groups" already exists

/usr/local/lib/python3.12/site-packages/pydal/adapters/base.py:410: OperationalError
____________________ ERROR at setup of test_api_posts_list _____________________

request = <SubRequest '_prepare_db' for <Function test_empty_db>>

    @pytest.fixture(scope='module', autouse=True)
    def _prepare_db(request):
        # Setup test database - drop and recreate all tables
        with db.connection():
            # Get all table names from the database
            tables = db.tables
    
            # Drop all tables manually to ensure clean state
            for table in tables:
                try:
                    db.executesql(f'DROP TABLE IF EXISTS "{table}"')
                except:
                    pass
    
            # Commit the drops
            db.commit()
    
            # Now create fresh schema
            migration = generate_runtime_migration(db)
>           migration.up()

tests.py:51: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/utils.py:34: in up
    op.run()
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/operations.py:150: in run
    self.engine.create_table(self.table_name, self.columns, self.primary_keys, **self.kw)
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/engine.py:97: in create_table
    self._log_and_exec(sql)
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/engine.py:92: in _log_and_exec
    self.adapter.execute(sql)
/usr/local/lib/python3.12/site-packages/pydal/adapters/__init__.py:67: in wrap
    return f(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <emmett.orm.engines.sqlite.SQLite object at 0xffff905b5a30>
args = ('CREATE TABLE "auth_groups"(\n    "id" INTEGER PRIMARY KEY AUTOINCREMENT,\n    "created_at" TIMESTAMP,\n    "updated_at" TIMESTAMP,\n    "role" CHAR(255) DEFAULT \'\' UNIQUE,\n    "description" TEXT\n);',)
kwargs = {}
command = 'CREATE TABLE "auth_groups"(\n    "id" INTEGER PRIMARY KEY AUTOINCREMENT,\n    "created_at" TIMESTAMP,\n    "updated_at" TIMESTAMP,\n    "role" CHAR(255) DEFAULT \'\' UNIQUE,\n    "description" TEXT\n);'
handlers = []

    @with_connection_or_raise
    def execute(self, *args, **kwargs):
        command = self.filter_sql_command(args[0])
        handlers = self._build_handlers_for_execution()
        for handler in handlers:
            handler.before_execute(command)
>       rv = self.cursor.execute(command, *args[1:], **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       sqlite3.OperationalError: table "auth_groups" already exists

/usr/local/lib/python3.12/site-packages/pydal/adapters/base.py:410: OperationalError
_________________ ERROR at setup of test_api_posts_get_single __________________

request = <SubRequest '_prepare_db' for <Function test_empty_db>>

    @pytest.fixture(scope='module', autouse=True)
    def _prepare_db(request):
        # Setup test database - drop and recreate all tables
        with db.connection():
            # Get all table names from the database
            tables = db.tables
    
            # Drop all tables manually to ensure clean state
            for table in tables:
                try:
                    db.executesql(f'DROP TABLE IF EXISTS "{table}"')
                except:
                    pass
    
            # Commit the drops
            db.commit()
    
            # Now create fresh schema
            migration = generate_runtime_migration(db)
>           migration.up()

tests.py:51: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/utils.py:34: in up
    op.run()
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/operations.py:150: in run
    self.engine.create_table(self.table_name, self.columns, self.primary_keys, **self.kw)
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/engine.py:97: in create_table
    self._log_and_exec(sql)
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/engine.py:92: in _log_and_exec
    self.adapter.execute(sql)
/usr/local/lib/python3.12/site-packages/pydal/adapters/__init__.py:67: in wrap
    return f(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <emmett.orm.engines.sqlite.SQLite object at 0xffff905b5a30>
args = ('CREATE TABLE "auth_groups"(\n    "id" INTEGER PRIMARY KEY AUTOINCREMENT,\n    "created_at" TIMESTAMP,\n    "updated_at" TIMESTAMP,\n    "role" CHAR(255) DEFAULT \'\' UNIQUE,\n    "description" TEXT\n);',)
kwargs = {}
command = 'CREATE TABLE "auth_groups"(\n    "id" INTEGER PRIMARY KEY AUTOINCREMENT,\n    "created_at" TIMESTAMP,\n    "updated_at" TIMESTAMP,\n    "role" CHAR(255) DEFAULT \'\' UNIQUE,\n    "description" TEXT\n);'
handlers = []

    @with_connection_or_raise
    def execute(self, *args, **kwargs):
        command = self.filter_sql_command(args[0])
        handlers = self._build_handlers_for_execution()
        for handler in handlers:
            handler.before_execute(command)
>       rv = self.cursor.execute(command, *args[1:], **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       sqlite3.OperationalError: table "auth_groups" already exists

/usr/local/lib/python3.12/site-packages/pydal/adapters/base.py:410: OperationalError
_______________ ERROR at setup of test_api_posts_get_invalid_id ________________

request = <SubRequest '_prepare_db' for <Function test_empty_db>>

    @pytest.fixture(scope='module', autouse=True)
    def _prepare_db(request):
        # Setup test database - drop and recreate all tables
        with db.connection():
            # Get all table names from the database
            tables = db.tables
    
            # Drop all tables manually to ensure clean state
            for table in tables:
                try:
                    db.executesql(f'DROP TABLE IF EXISTS "{table}"')
                except:
                    pass
    
            # Commit the drops
            db.commit()
    
            # Now create fresh schema
            migration = generate_runtime_migration(db)
>           migration.up()

tests.py:51: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/utils.py:34: in up
    op.run()
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/operations.py:150: in run
    self.engine.create_table(self.table_name, self.columns, self.primary_keys, **self.kw)
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/engine.py:97: in create_table
    self._log_and_exec(sql)
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/engine.py:92: in _log_and_exec
    self.adapter.execute(sql)
/usr/local/lib/python3.12/site-packages/pydal/adapters/__init__.py:67: in wrap
    return f(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <emmett.orm.engines.sqlite.SQLite object at 0xffff905b5a30>
args = ('CREATE TABLE "auth_groups"(\n    "id" INTEGER PRIMARY KEY AUTOINCREMENT,\n    "created_at" TIMESTAMP,\n    "updated_at" TIMESTAMP,\n    "role" CHAR(255) DEFAULT \'\' UNIQUE,\n    "description" TEXT\n);',)
kwargs = {}
command = 'CREATE TABLE "auth_groups"(\n    "id" INTEGER PRIMARY KEY AUTOINCREMENT,\n    "created_at" TIMESTAMP,\n    "updated_at" TIMESTAMP,\n    "role" CHAR(255) DEFAULT \'\' UNIQUE,\n    "description" TEXT\n);'
handlers = []

    @with_connection_or_raise
    def execute(self, *args, **kwargs):
        command = self.filter_sql_command(args[0])
        handlers = self._build_handlers_for_execution()
        for handler in handlers:
            handler.before_execute(command)
>       rv = self.cursor.execute(command, *args[1:], **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       sqlite3.OperationalError: table "auth_groups" already exists

/usr/local/lib/python3.12/site-packages/pydal/adapters/base.py:410: OperationalError
____________ ERROR at setup of test_api_posts_create_authenticated _____________

request = <SubRequest '_prepare_db' for <Function test_empty_db>>

    @pytest.fixture(scope='module', autouse=True)
    def _prepare_db(request):
        # Setup test database - drop and recreate all tables
        with db.connection():
            # Get all table names from the database
            tables = db.tables
    
            # Drop all tables manually to ensure clean state
            for table in tables:
                try:
                    db.executesql(f'DROP TABLE IF EXISTS "{table}"')
                except:
                    pass
    
            # Commit the drops
            db.commit()
    
            # Now create fresh schema
            migration = generate_runtime_migration(db)
>           migration.up()

tests.py:51: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/utils.py:34: in up
    op.run()
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/operations.py:150: in run
    self.engine.create_table(self.table_name, self.columns, self.primary_keys, **self.kw)
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/engine.py:97: in create_table
    self._log_and_exec(sql)
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/engine.py:92: in _log_and_exec
    self.adapter.execute(sql)
/usr/local/lib/python3.12/site-packages/pydal/adapters/__init__.py:67: in wrap
    return f(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <emmett.orm.engines.sqlite.SQLite object at 0xffff905b5a30>
args = ('CREATE TABLE "auth_groups"(\n    "id" INTEGER PRIMARY KEY AUTOINCREMENT,\n    "created_at" TIMESTAMP,\n    "updated_at" TIMESTAMP,\n    "role" CHAR(255) DEFAULT \'\' UNIQUE,\n    "description" TEXT\n);',)
kwargs = {}
command = 'CREATE TABLE "auth_groups"(\n    "id" INTEGER PRIMARY KEY AUTOINCREMENT,\n    "created_at" TIMESTAMP,\n    "updated_at" TIMESTAMP,\n    "role" CHAR(255) DEFAULT \'\' UNIQUE,\n    "description" TEXT\n);'
handlers = []

    @with_connection_or_raise
    def execute(self, *args, **kwargs):
        command = self.filter_sql_command(args[0])
        handlers = self._build_handlers_for_execution()
        for handler in handlers:
            handler.before_execute(command)
>       rv = self.cursor.execute(command, *args[1:], **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       sqlite3.OperationalError: table "auth_groups" already exists

/usr/local/lib/python3.12/site-packages/pydal/adapters/base.py:410: OperationalError
____________ ERROR at setup of test_api_posts_create_missing_title _____________

request = <SubRequest '_prepare_db' for <Function test_empty_db>>

    @pytest.fixture(scope='module', autouse=True)
    def _prepare_db(request):
        # Setup test database - drop and recreate all tables
        with db.connection():
            # Get all table names from the database
            tables = db.tables
    
            # Drop all tables manually to ensure clean state
            for table in tables:
                try:
                    db.executesql(f'DROP TABLE IF EXISTS "{table}"')
                except:
                    pass
    
            # Commit the drops
            db.commit()
    
            # Now create fresh schema
            migration = generate_runtime_migration(db)
>           migration.up()

tests.py:51: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/utils.py:34: in up
    op.run()
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/operations.py:150: in run
    self.engine.create_table(self.table_name, self.columns, self.primary_keys, **self.kw)
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/engine.py:97: in create_table
    self._log_and_exec(sql)
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/engine.py:92: in _log_and_exec
    self.adapter.execute(sql)
/usr/local/lib/python3.12/site-packages/pydal/adapters/__init__.py:67: in wrap
    return f(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <emmett.orm.engines.sqlite.SQLite object at 0xffff905b5a30>
args = ('CREATE TABLE "auth_groups"(\n    "id" INTEGER PRIMARY KEY AUTOINCREMENT,\n    "created_at" TIMESTAMP,\n    "updated_at" TIMESTAMP,\n    "role" CHAR(255) DEFAULT \'\' UNIQUE,\n    "description" TEXT\n);',)
kwargs = {}
command = 'CREATE TABLE "auth_groups"(\n    "id" INTEGER PRIMARY KEY AUTOINCREMENT,\n    "created_at" TIMESTAMP,\n    "updated_at" TIMESTAMP,\n    "role" CHAR(255) DEFAULT \'\' UNIQUE,\n    "description" TEXT\n);'
handlers = []

    @with_connection_or_raise
    def execute(self, *args, **kwargs):
        command = self.filter_sql_command(args[0])
        handlers = self._build_handlers_for_execution()
        for handler in handlers:
            handler.before_execute(command)
>       rv = self.cursor.execute(command, *args[1:], **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       sqlite3.OperationalError: table "auth_groups" already exists

/usr/local/lib/python3.12/site-packages/pydal/adapters/base.py:410: OperationalError
_____________ ERROR at setup of test_api_posts_create_missing_text _____________

request = <SubRequest '_prepare_db' for <Function test_empty_db>>

    @pytest.fixture(scope='module', autouse=True)
    def _prepare_db(request):
        # Setup test database - drop and recreate all tables
        with db.connection():
            # Get all table names from the database
            tables = db.tables
    
            # Drop all tables manually to ensure clean state
            for table in tables:
                try:
                    db.executesql(f'DROP TABLE IF EXISTS "{table}"')
                except:
                    pass
    
            # Commit the drops
            db.commit()
    
            # Now create fresh schema
            migration = generate_runtime_migration(db)
>           migration.up()

tests.py:51: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/utils.py:34: in up
    op.run()
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/operations.py:150: in run
    self.engine.create_table(self.table_name, self.columns, self.primary_keys, **self.kw)
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/engine.py:97: in create_table
    self._log_and_exec(sql)
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/engine.py:92: in _log_and_exec
    self.adapter.execute(sql)
/usr/local/lib/python3.12/site-packages/pydal/adapters/__init__.py:67: in wrap
    return f(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <emmett.orm.engines.sqlite.SQLite object at 0xffff905b5a30>
args = ('CREATE TABLE "auth_groups"(\n    "id" INTEGER PRIMARY KEY AUTOINCREMENT,\n    "created_at" TIMESTAMP,\n    "updated_at" TIMESTAMP,\n    "role" CHAR(255) DEFAULT \'\' UNIQUE,\n    "description" TEXT\n);',)
kwargs = {}
command = 'CREATE TABLE "auth_groups"(\n    "id" INTEGER PRIMARY KEY AUTOINCREMENT,\n    "created_at" TIMESTAMP,\n    "updated_at" TIMESTAMP,\n    "role" CHAR(255) DEFAULT \'\' UNIQUE,\n    "description" TEXT\n);'
handlers = []

    @with_connection_or_raise
    def execute(self, *args, **kwargs):
        command = self.filter_sql_command(args[0])
        handlers = self._build_handlers_for_execution()
        for handler in handlers:
            handler.before_execute(command)
>       rv = self.cursor.execute(command, *args[1:], **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       sqlite3.OperationalError: table "auth_groups" already exists

/usr/local/lib/python3.12/site-packages/pydal/adapters/base.py:410: OperationalError
___________________ ERROR at setup of test_api_posts_update ____________________

request = <SubRequest '_prepare_db' for <Function test_empty_db>>

    @pytest.fixture(scope='module', autouse=True)
    def _prepare_db(request):
        # Setup test database - drop and recreate all tables
        with db.connection():
            # Get all table names from the database
            tables = db.tables
    
            # Drop all tables manually to ensure clean state
            for table in tables:
                try:
                    db.executesql(f'DROP TABLE IF EXISTS "{table}"')
                except:
                    pass
    
            # Commit the drops
            db.commit()
    
            # Now create fresh schema
            migration = generate_runtime_migration(db)
>           migration.up()

tests.py:51: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/utils.py:34: in up
    op.run()
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/operations.py:150: in run
    self.engine.create_table(self.table_name, self.columns, self.primary_keys, **self.kw)
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/engine.py:97: in create_table
    self._log_and_exec(sql)
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/engine.py:92: in _log_and_exec
    self.adapter.execute(sql)
/usr/local/lib/python3.12/site-packages/pydal/adapters/__init__.py:67: in wrap
    return f(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <emmett.orm.engines.sqlite.SQLite object at 0xffff905b5a30>
args = ('CREATE TABLE "auth_groups"(\n    "id" INTEGER PRIMARY KEY AUTOINCREMENT,\n    "created_at" TIMESTAMP,\n    "updated_at" TIMESTAMP,\n    "role" CHAR(255) DEFAULT \'\' UNIQUE,\n    "description" TEXT\n);',)
kwargs = {}
command = 'CREATE TABLE "auth_groups"(\n    "id" INTEGER PRIMARY KEY AUTOINCREMENT,\n    "created_at" TIMESTAMP,\n    "updated_at" TIMESTAMP,\n    "role" CHAR(255) DEFAULT \'\' UNIQUE,\n    "description" TEXT\n);'
handlers = []

    @with_connection_or_raise
    def execute(self, *args, **kwargs):
        command = self.filter_sql_command(args[0])
        handlers = self._build_handlers_for_execution()
        for handler in handlers:
            handler.before_execute(command)
>       rv = self.cursor.execute(command, *args[1:], **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       sqlite3.OperationalError: table "auth_groups" already exists

/usr/local/lib/python3.12/site-packages/pydal/adapters/base.py:410: OperationalError
___________________ ERROR at setup of test_api_posts_delete ____________________

request = <SubRequest '_prepare_db' for <Function test_empty_db>>

    @pytest.fixture(scope='module', autouse=True)
    def _prepare_db(request):
        # Setup test database - drop and recreate all tables
        with db.connection():
            # Get all table names from the database
            tables = db.tables
    
            # Drop all tables manually to ensure clean state
            for table in tables:
                try:
                    db.executesql(f'DROP TABLE IF EXISTS "{table}"')
                except:
                    pass
    
            # Commit the drops
            db.commit()
    
            # Now create fresh schema
            migration = generate_runtime_migration(db)
>           migration.up()

tests.py:51: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/utils.py:34: in up
    op.run()
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/operations.py:150: in run
    self.engine.create_table(self.table_name, self.columns, self.primary_keys, **self.kw)
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/engine.py:97: in create_table
    self._log_and_exec(sql)
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/engine.py:92: in _log_and_exec
    self.adapter.execute(sql)
/usr/local/lib/python3.12/site-packages/pydal/adapters/__init__.py:67: in wrap
    return f(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <emmett.orm.engines.sqlite.SQLite object at 0xffff905b5a30>
args = ('CREATE TABLE "auth_groups"(\n    "id" INTEGER PRIMARY KEY AUTOINCREMENT,\n    "created_at" TIMESTAMP,\n    "updated_at" TIMESTAMP,\n    "role" CHAR(255) DEFAULT \'\' UNIQUE,\n    "description" TEXT\n);',)
kwargs = {}
command = 'CREATE TABLE "auth_groups"(\n    "id" INTEGER PRIMARY KEY AUTOINCREMENT,\n    "created_at" TIMESTAMP,\n    "updated_at" TIMESTAMP,\n    "role" CHAR(255) DEFAULT \'\' UNIQUE,\n    "description" TEXT\n);'
handlers = []

    @with_connection_or_raise
    def execute(self, *args, **kwargs):
        command = self.filter_sql_command(args[0])
        handlers = self._build_handlers_for_execution()
        for handler in handlers:
            handler.before_execute(command)
>       rv = self.cursor.execute(command, *args[1:], **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       sqlite3.OperationalError: table "auth_groups" already exists

/usr/local/lib/python3.12/site-packages/pydal/adapters/base.py:410: OperationalError
________________ ERROR at setup of test_api_posts_user_auto_set ________________

request = <SubRequest '_prepare_db' for <Function test_empty_db>>

    @pytest.fixture(scope='module', autouse=True)
    def _prepare_db(request):
        # Setup test database - drop and recreate all tables
        with db.connection():
            # Get all table names from the database
            tables = db.tables
    
            # Drop all tables manually to ensure clean state
            for table in tables:
                try:
                    db.executesql(f'DROP TABLE IF EXISTS "{table}"')
                except:
                    pass
    
            # Commit the drops
            db.commit()
    
            # Now create fresh schema
            migration = generate_runtime_migration(db)
>           migration.up()

tests.py:51: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/utils.py:34: in up
    op.run()
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/operations.py:150: in run
    self.engine.create_table(self.table_name, self.columns, self.primary_keys, **self.kw)
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/engine.py:97: in create_table
    self._log_and_exec(sql)
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/engine.py:92: in _log_and_exec
    self.adapter.execute(sql)
/usr/local/lib/python3.12/site-packages/pydal/adapters/__init__.py:67: in wrap
    return f(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <emmett.orm.engines.sqlite.SQLite object at 0xffff905b5a30>
args = ('CREATE TABLE "auth_groups"(\n    "id" INTEGER PRIMARY KEY AUTOINCREMENT,\n    "created_at" TIMESTAMP,\n    "updated_at" TIMESTAMP,\n    "role" CHAR(255) DEFAULT \'\' UNIQUE,\n    "description" TEXT\n);',)
kwargs = {}
command = 'CREATE TABLE "auth_groups"(\n    "id" INTEGER PRIMARY KEY AUTOINCREMENT,\n    "created_at" TIMESTAMP,\n    "updated_at" TIMESTAMP,\n    "role" CHAR(255) DEFAULT \'\' UNIQUE,\n    "description" TEXT\n);'
handlers = []

    @with_connection_or_raise
    def execute(self, *args, **kwargs):
        command = self.filter_sql_command(args[0])
        handlers = self._build_handlers_for_execution()
        for handler in handlers:
            handler.before_execute(command)
>       rv = self.cursor.execute(command, *args[1:], **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       sqlite3.OperationalError: table "auth_groups" already exists

/usr/local/lib/python3.12/site-packages/pydal/adapters/base.py:410: OperationalError
___________________ ERROR at setup of test_api_comments_list ___________________

request = <SubRequest '_prepare_db' for <Function test_empty_db>>

    @pytest.fixture(scope='module', autouse=True)
    def _prepare_db(request):
        # Setup test database - drop and recreate all tables
        with db.connection():
            # Get all table names from the database
            tables = db.tables
    
            # Drop all tables manually to ensure clean state
            for table in tables:
                try:
                    db.executesql(f'DROP TABLE IF EXISTS "{table}"')
                except:
                    pass
    
            # Commit the drops
            db.commit()
    
            # Now create fresh schema
            migration = generate_runtime_migration(db)
>           migration.up()

tests.py:51: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/utils.py:34: in up
    op.run()
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/operations.py:150: in run
    self.engine.create_table(self.table_name, self.columns, self.primary_keys, **self.kw)
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/engine.py:97: in create_table
    self._log_and_exec(sql)
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/engine.py:92: in _log_and_exec
    self.adapter.execute(sql)
/usr/local/lib/python3.12/site-packages/pydal/adapters/__init__.py:67: in wrap
    return f(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <emmett.orm.engines.sqlite.SQLite object at 0xffff905b5a30>
args = ('CREATE TABLE "auth_groups"(\n    "id" INTEGER PRIMARY KEY AUTOINCREMENT,\n    "created_at" TIMESTAMP,\n    "updated_at" TIMESTAMP,\n    "role" CHAR(255) DEFAULT \'\' UNIQUE,\n    "description" TEXT\n);',)
kwargs = {}
command = 'CREATE TABLE "auth_groups"(\n    "id" INTEGER PRIMARY KEY AUTOINCREMENT,\n    "created_at" TIMESTAMP,\n    "updated_at" TIMESTAMP,\n    "role" CHAR(255) DEFAULT \'\' UNIQUE,\n    "description" TEXT\n);'
handlers = []

    @with_connection_or_raise
    def execute(self, *args, **kwargs):
        command = self.filter_sql_command(args[0])
        handlers = self._build_handlers_for_execution()
        for handler in handlers:
            handler.before_execute(command)
>       rv = self.cursor.execute(command, *args[1:], **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       sqlite3.OperationalError: table "auth_groups" already exists

/usr/local/lib/python3.12/site-packages/pydal/adapters/base.py:410: OperationalError
__________________ ERROR at setup of test_api_comments_create __________________

request = <SubRequest '_prepare_db' for <Function test_empty_db>>

    @pytest.fixture(scope='module', autouse=True)
    def _prepare_db(request):
        # Setup test database - drop and recreate all tables
        with db.connection():
            # Get all table names from the database
            tables = db.tables
    
            # Drop all tables manually to ensure clean state
            for table in tables:
                try:
                    db.executesql(f'DROP TABLE IF EXISTS "{table}"')
                except:
                    pass
    
            # Commit the drops
            db.commit()
    
            # Now create fresh schema
            migration = generate_runtime_migration(db)
>           migration.up()

tests.py:51: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/utils.py:34: in up
    op.run()
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/operations.py:150: in run
    self.engine.create_table(self.table_name, self.columns, self.primary_keys, **self.kw)
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/engine.py:97: in create_table
    self._log_and_exec(sql)
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/engine.py:92: in _log_and_exec
    self.adapter.execute(sql)
/usr/local/lib/python3.12/site-packages/pydal/adapters/__init__.py:67: in wrap
    return f(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <emmett.orm.engines.sqlite.SQLite object at 0xffff905b5a30>
args = ('CREATE TABLE "auth_groups"(\n    "id" INTEGER PRIMARY KEY AUTOINCREMENT,\n    "created_at" TIMESTAMP,\n    "updated_at" TIMESTAMP,\n    "role" CHAR(255) DEFAULT \'\' UNIQUE,\n    "description" TEXT\n);',)
kwargs = {}
command = 'CREATE TABLE "auth_groups"(\n    "id" INTEGER PRIMARY KEY AUTOINCREMENT,\n    "created_at" TIMESTAMP,\n    "updated_at" TIMESTAMP,\n    "role" CHAR(255) DEFAULT \'\' UNIQUE,\n    "description" TEXT\n);'
handlers = []

    @with_connection_or_raise
    def execute(self, *args, **kwargs):
        command = self.filter_sql_command(args[0])
        handlers = self._build_handlers_for_execution()
        for handler in handlers:
            handler.before_execute(command)
>       rv = self.cursor.execute(command, *args[1:], **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       sqlite3.OperationalError: table "auth_groups" already exists

/usr/local/lib/python3.12/site-packages/pydal/adapters/base.py:410: OperationalError
___________ ERROR at setup of test_api_comments_create_missing_text ____________

request = <SubRequest '_prepare_db' for <Function test_empty_db>>

    @pytest.fixture(scope='module', autouse=True)
    def _prepare_db(request):
        # Setup test database - drop and recreate all tables
        with db.connection():
            # Get all table names from the database
            tables = db.tables
    
            # Drop all tables manually to ensure clean state
            for table in tables:
                try:
                    db.executesql(f'DROP TABLE IF EXISTS "{table}"')
                except:
                    pass
    
            # Commit the drops
            db.commit()
    
            # Now create fresh schema
            migration = generate_runtime_migration(db)
>           migration.up()

tests.py:51: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/utils.py:34: in up
    op.run()
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/operations.py:150: in run
    self.engine.create_table(self.table_name, self.columns, self.primary_keys, **self.kw)
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/engine.py:97: in create_table
    self._log_and_exec(sql)
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/engine.py:92: in _log_and_exec
    self.adapter.execute(sql)
/usr/local/lib/python3.12/site-packages/pydal/adapters/__init__.py:67: in wrap
    return f(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <emmett.orm.engines.sqlite.SQLite object at 0xffff905b5a30>
args = ('CREATE TABLE "auth_groups"(\n    "id" INTEGER PRIMARY KEY AUTOINCREMENT,\n    "created_at" TIMESTAMP,\n    "updated_at" TIMESTAMP,\n    "role" CHAR(255) DEFAULT \'\' UNIQUE,\n    "description" TEXT\n);',)
kwargs = {}
command = 'CREATE TABLE "auth_groups"(\n    "id" INTEGER PRIMARY KEY AUTOINCREMENT,\n    "created_at" TIMESTAMP,\n    "updated_at" TIMESTAMP,\n    "role" CHAR(255) DEFAULT \'\' UNIQUE,\n    "description" TEXT\n);'
handlers = []

    @with_connection_or_raise
    def execute(self, *args, **kwargs):
        command = self.filter_sql_command(args[0])
        handlers = self._build_handlers_for_execution()
        for handler in handlers:
            handler.before_execute(command)
>       rv = self.cursor.execute(command, *args[1:], **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       sqlite3.OperationalError: table "auth_groups" already exists

/usr/local/lib/python3.12/site-packages/pydal/adapters/base.py:410: OperationalError
___________ ERROR at setup of test_api_comments_create_invalid_post ____________

request = <SubRequest '_prepare_db' for <Function test_empty_db>>

    @pytest.fixture(scope='module', autouse=True)
    def _prepare_db(request):
        # Setup test database - drop and recreate all tables
        with db.connection():
            # Get all table names from the database
            tables = db.tables
    
            # Drop all tables manually to ensure clean state
            for table in tables:
                try:
                    db.executesql(f'DROP TABLE IF EXISTS "{table}"')
                except:
                    pass
    
            # Commit the drops
            db.commit()
    
            # Now create fresh schema
            migration = generate_runtime_migration(db)
>           migration.up()

tests.py:51: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/utils.py:34: in up
    op.run()
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/operations.py:150: in run
    self.engine.create_table(self.table_name, self.columns, self.primary_keys, **self.kw)
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/engine.py:97: in create_table
    self._log_and_exec(sql)
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/engine.py:92: in _log_and_exec
    self.adapter.execute(sql)
/usr/local/lib/python3.12/site-packages/pydal/adapters/__init__.py:67: in wrap
    return f(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <emmett.orm.engines.sqlite.SQLite object at 0xffff905b5a30>
args = ('CREATE TABLE "auth_groups"(\n    "id" INTEGER PRIMARY KEY AUTOINCREMENT,\n    "created_at" TIMESTAMP,\n    "updated_at" TIMESTAMP,\n    "role" CHAR(255) DEFAULT \'\' UNIQUE,\n    "description" TEXT\n);',)
kwargs = {}
command = 'CREATE TABLE "auth_groups"(\n    "id" INTEGER PRIMARY KEY AUTOINCREMENT,\n    "created_at" TIMESTAMP,\n    "updated_at" TIMESTAMP,\n    "role" CHAR(255) DEFAULT \'\' UNIQUE,\n    "description" TEXT\n);'
handlers = []

    @with_connection_or_raise
    def execute(self, *args, **kwargs):
        command = self.filter_sql_command(args[0])
        handlers = self._build_handlers_for_execution()
        for handler in handlers:
            handler.before_execute(command)
>       rv = self.cursor.execute(command, *args[1:], **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       sqlite3.OperationalError: table "auth_groups" already exists

/usr/local/lib/python3.12/site-packages/pydal/adapters/base.py:410: OperationalError
______________ ERROR at setup of test_api_comments_user_auto_set _______________

request = <SubRequest '_prepare_db' for <Function test_empty_db>>

    @pytest.fixture(scope='module', autouse=True)
    def _prepare_db(request):
        # Setup test database - drop and recreate all tables
        with db.connection():
            # Get all table names from the database
            tables = db.tables
    
            # Drop all tables manually to ensure clean state
            for table in tables:
                try:
                    db.executesql(f'DROP TABLE IF EXISTS "{table}"')
                except:
                    pass
    
            # Commit the drops
            db.commit()
    
            # Now create fresh schema
            migration = generate_runtime_migration(db)
>           migration.up()

tests.py:51: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/utils.py:34: in up
    op.run()
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/operations.py:150: in run
    self.engine.create_table(self.table_name, self.columns, self.primary_keys, **self.kw)
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/engine.py:97: in create_table
    self._log_and_exec(sql)
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/engine.py:92: in _log_and_exec
    self.adapter.execute(sql)
/usr/local/lib/python3.12/site-packages/pydal/adapters/__init__.py:67: in wrap
    return f(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <emmett.orm.engines.sqlite.SQLite object at 0xffff905b5a30>
args = ('CREATE TABLE "auth_groups"(\n    "id" INTEGER PRIMARY KEY AUTOINCREMENT,\n    "created_at" TIMESTAMP,\n    "updated_at" TIMESTAMP,\n    "role" CHAR(255) DEFAULT \'\' UNIQUE,\n    "description" TEXT\n);',)
kwargs = {}
command = 'CREATE TABLE "auth_groups"(\n    "id" INTEGER PRIMARY KEY AUTOINCREMENT,\n    "created_at" TIMESTAMP,\n    "updated_at" TIMESTAMP,\n    "role" CHAR(255) DEFAULT \'\' UNIQUE,\n    "description" TEXT\n);'
handlers = []

    @with_connection_or_raise
    def execute(self, *args, **kwargs):
        command = self.filter_sql_command(args[0])
        handlers = self._build_handlers_for_execution()
        for handler in handlers:
            handler.before_execute(command)
>       rv = self.cursor.execute(command, *args[1:], **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       sqlite3.OperationalError: table "auth_groups" already exists

/usr/local/lib/python3.12/site-packages/pydal/adapters/base.py:410: OperationalError
____________________ ERROR at setup of test_api_users_list _____________________

request = <SubRequest '_prepare_db' for <Function test_empty_db>>

    @pytest.fixture(scope='module', autouse=True)
    def _prepare_db(request):
        # Setup test database - drop and recreate all tables
        with db.connection():
            # Get all table names from the database
            tables = db.tables
    
            # Drop all tables manually to ensure clean state
            for table in tables:
                try:
                    db.executesql(f'DROP TABLE IF EXISTS "{table}"')
                except:
                    pass
    
            # Commit the drops
            db.commit()
    
            # Now create fresh schema
            migration = generate_runtime_migration(db)
>           migration.up()

tests.py:51: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/utils.py:34: in up
    op.run()
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/operations.py:150: in run
    self.engine.create_table(self.table_name, self.columns, self.primary_keys, **self.kw)
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/engine.py:97: in create_table
    self._log_and_exec(sql)
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/engine.py:92: in _log_and_exec
    self.adapter.execute(sql)
/usr/local/lib/python3.12/site-packages/pydal/adapters/__init__.py:67: in wrap
    return f(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <emmett.orm.engines.sqlite.SQLite object at 0xffff905b5a30>
args = ('CREATE TABLE "auth_groups"(\n    "id" INTEGER PRIMARY KEY AUTOINCREMENT,\n    "created_at" TIMESTAMP,\n    "updated_at" TIMESTAMP,\n    "role" CHAR(255) DEFAULT \'\' UNIQUE,\n    "description" TEXT\n);',)
kwargs = {}
command = 'CREATE TABLE "auth_groups"(\n    "id" INTEGER PRIMARY KEY AUTOINCREMENT,\n    "created_at" TIMESTAMP,\n    "updated_at" TIMESTAMP,\n    "role" CHAR(255) DEFAULT \'\' UNIQUE,\n    "description" TEXT\n);'
handlers = []

    @with_connection_or_raise
    def execute(self, *args, **kwargs):
        command = self.filter_sql_command(args[0])
        handlers = self._build_handlers_for_execution()
        for handler in handlers:
            handler.before_execute(command)
>       rv = self.cursor.execute(command, *args[1:], **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       sqlite3.OperationalError: table "auth_groups" already exists

/usr/local/lib/python3.12/site-packages/pydal/adapters/base.py:410: OperationalError
_________________ ERROR at setup of test_api_users_get_single __________________

request = <SubRequest '_prepare_db' for <Function test_empty_db>>

    @pytest.fixture(scope='module', autouse=True)
    def _prepare_db(request):
        # Setup test database - drop and recreate all tables
        with db.connection():
            # Get all table names from the database
            tables = db.tables
    
            # Drop all tables manually to ensure clean state
            for table in tables:
                try:
                    db.executesql(f'DROP TABLE IF EXISTS "{table}"')
                except:
                    pass
    
            # Commit the drops
            db.commit()
    
            # Now create fresh schema
            migration = generate_runtime_migration(db)
>           migration.up()

tests.py:51: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/utils.py:34: in up
    op.run()
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/operations.py:150: in run
    self.engine.create_table(self.table_name, self.columns, self.primary_keys, **self.kw)
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/engine.py:97: in create_table
    self._log_and_exec(sql)
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/engine.py:92: in _log_and_exec
    self.adapter.execute(sql)
/usr/local/lib/python3.12/site-packages/pydal/adapters/__init__.py:67: in wrap
    return f(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <emmett.orm.engines.sqlite.SQLite object at 0xffff905b5a30>
args = ('CREATE TABLE "auth_groups"(\n    "id" INTEGER PRIMARY KEY AUTOINCREMENT,\n    "created_at" TIMESTAMP,\n    "updated_at" TIMESTAMP,\n    "role" CHAR(255) DEFAULT \'\' UNIQUE,\n    "description" TEXT\n);',)
kwargs = {}
command = 'CREATE TABLE "auth_groups"(\n    "id" INTEGER PRIMARY KEY AUTOINCREMENT,\n    "created_at" TIMESTAMP,\n    "updated_at" TIMESTAMP,\n    "role" CHAR(255) DEFAULT \'\' UNIQUE,\n    "description" TEXT\n);'
handlers = []

    @with_connection_or_raise
    def execute(self, *args, **kwargs):
        command = self.filter_sql_command(args[0])
        handlers = self._build_handlers_for_execution()
        for handler in handlers:
            handler.before_execute(command)
>       rv = self.cursor.execute(command, *args[1:], **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       sqlite3.OperationalError: table "auth_groups" already exists

/usr/local/lib/python3.12/site-packages/pydal/adapters/base.py:410: OperationalError
_______________ ERROR at setup of test_api_users_create_disabled _______________

request = <SubRequest '_prepare_db' for <Function test_empty_db>>

    @pytest.fixture(scope='module', autouse=True)
    def _prepare_db(request):
        # Setup test database - drop and recreate all tables
        with db.connection():
            # Get all table names from the database
            tables = db.tables
    
            # Drop all tables manually to ensure clean state
            for table in tables:
                try:
                    db.executesql(f'DROP TABLE IF EXISTS "{table}"')
                except:
                    pass
    
            # Commit the drops
            db.commit()
    
            # Now create fresh schema
            migration = generate_runtime_migration(db)
>           migration.up()

tests.py:51: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/utils.py:34: in up
    op.run()
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/operations.py:150: in run
    self.engine.create_table(self.table_name, self.columns, self.primary_keys, **self.kw)
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/engine.py:97: in create_table
    self._log_and_exec(sql)
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/engine.py:92: in _log_and_exec
    self.adapter.execute(sql)
/usr/local/lib/python3.12/site-packages/pydal/adapters/__init__.py:67: in wrap
    return f(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <emmett.orm.engines.sqlite.SQLite object at 0xffff905b5a30>
args = ('CREATE TABLE "auth_groups"(\n    "id" INTEGER PRIMARY KEY AUTOINCREMENT,\n    "created_at" TIMESTAMP,\n    "updated_at" TIMESTAMP,\n    "role" CHAR(255) DEFAULT \'\' UNIQUE,\n    "description" TEXT\n);',)
kwargs = {}
command = 'CREATE TABLE "auth_groups"(\n    "id" INTEGER PRIMARY KEY AUTOINCREMENT,\n    "created_at" TIMESTAMP,\n    "updated_at" TIMESTAMP,\n    "role" CHAR(255) DEFAULT \'\' UNIQUE,\n    "description" TEXT\n);'
handlers = []

    @with_connection_or_raise
    def execute(self, *args, **kwargs):
        command = self.filter_sql_command(args[0])
        handlers = self._build_handlers_for_execution()
        for handler in handlers:
            handler.before_execute(command)
>       rv = self.cursor.execute(command, *args[1:], **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       sqlite3.OperationalError: table "auth_groups" already exists

/usr/local/lib/python3.12/site-packages/pydal/adapters/base.py:410: OperationalError
_______________ ERROR at setup of test_api_users_update_disabled _______________

request = <SubRequest '_prepare_db' for <Function test_empty_db>>

    @pytest.fixture(scope='module', autouse=True)
    def _prepare_db(request):
        # Setup test database - drop and recreate all tables
        with db.connection():
            # Get all table names from the database
            tables = db.tables
    
            # Drop all tables manually to ensure clean state
            for table in tables:
                try:
                    db.executesql(f'DROP TABLE IF EXISTS "{table}"')
                except:
                    pass
    
            # Commit the drops
            db.commit()
    
            # Now create fresh schema
            migration = generate_runtime_migration(db)
>           migration.up()

tests.py:51: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/utils.py:34: in up
    op.run()
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/operations.py:150: in run
    self.engine.create_table(self.table_name, self.columns, self.primary_keys, **self.kw)
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/engine.py:97: in create_table
    self._log_and_exec(sql)
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/engine.py:92: in _log_and_exec
    self.adapter.execute(sql)
/usr/local/lib/python3.12/site-packages/pydal/adapters/__init__.py:67: in wrap
    return f(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <emmett.orm.engines.sqlite.SQLite object at 0xffff905b5a30>
args = ('CREATE TABLE "auth_groups"(\n    "id" INTEGER PRIMARY KEY AUTOINCREMENT,\n    "created_at" TIMESTAMP,\n    "updated_at" TIMESTAMP,\n    "role" CHAR(255) DEFAULT \'\' UNIQUE,\n    "description" TEXT\n);',)
kwargs = {}
command = 'CREATE TABLE "auth_groups"(\n    "id" INTEGER PRIMARY KEY AUTOINCREMENT,\n    "created_at" TIMESTAMP,\n    "updated_at" TIMESTAMP,\n    "role" CHAR(255) DEFAULT \'\' UNIQUE,\n    "description" TEXT\n);'
handlers = []

    @with_connection_or_raise
    def execute(self, *args, **kwargs):
        command = self.filter_sql_command(args[0])
        handlers = self._build_handlers_for_execution()
        for handler in handlers:
            handler.before_execute(command)
>       rv = self.cursor.execute(command, *args[1:], **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       sqlite3.OperationalError: table "auth_groups" already exists

/usr/local/lib/python3.12/site-packages/pydal/adapters/base.py:410: OperationalError
_______________ ERROR at setup of test_api_users_delete_disabled _______________

request = <SubRequest '_prepare_db' for <Function test_empty_db>>

    @pytest.fixture(scope='module', autouse=True)
    def _prepare_db(request):
        # Setup test database - drop and recreate all tables
        with db.connection():
            # Get all table names from the database
            tables = db.tables
    
            # Drop all tables manually to ensure clean state
            for table in tables:
                try:
                    db.executesql(f'DROP TABLE IF EXISTS "{table}"')
                except:
                    pass
    
            # Commit the drops
            db.commit()
    
            # Now create fresh schema
            migration = generate_runtime_migration(db)
>           migration.up()

tests.py:51: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/utils.py:34: in up
    op.run()
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/operations.py:150: in run
    self.engine.create_table(self.table_name, self.columns, self.primary_keys, **self.kw)
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/engine.py:97: in create_table
    self._log_and_exec(sql)
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/engine.py:92: in _log_and_exec
    self.adapter.execute(sql)
/usr/local/lib/python3.12/site-packages/pydal/adapters/__init__.py:67: in wrap
    return f(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <emmett.orm.engines.sqlite.SQLite object at 0xffff905b5a30>
args = ('CREATE TABLE "auth_groups"(\n    "id" INTEGER PRIMARY KEY AUTOINCREMENT,\n    "created_at" TIMESTAMP,\n    "updated_at" TIMESTAMP,\n    "role" CHAR(255) DEFAULT \'\' UNIQUE,\n    "description" TEXT\n);',)
kwargs = {}
command = 'CREATE TABLE "auth_groups"(\n    "id" INTEGER PRIMARY KEY AUTOINCREMENT,\n    "created_at" TIMESTAMP,\n    "updated_at" TIMESTAMP,\n    "role" CHAR(255) DEFAULT \'\' UNIQUE,\n    "description" TEXT\n);'
handlers = []

    @with_connection_or_raise
    def execute(self, *args, **kwargs):
        command = self.filter_sql_command(args[0])
        handlers = self._build_handlers_for_execution()
        for handler in handlers:
            handler.before_execute(command)
>       rv = self.cursor.execute(command, *args[1:], **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       sqlite3.OperationalError: table "auth_groups" already exists

/usr/local/lib/python3.12/site-packages/pydal/adapters/base.py:410: OperationalError
__________________ ERROR at setup of test_openapi_spec_exists __________________

request = <SubRequest '_prepare_db' for <Function test_empty_db>>

    @pytest.fixture(scope='module', autouse=True)
    def _prepare_db(request):
        # Setup test database - drop and recreate all tables
        with db.connection():
            # Get all table names from the database
            tables = db.tables
    
            # Drop all tables manually to ensure clean state
            for table in tables:
                try:
                    db.executesql(f'DROP TABLE IF EXISTS "{table}"')
                except:
                    pass
    
            # Commit the drops
            db.commit()
    
            # Now create fresh schema
            migration = generate_runtime_migration(db)
>           migration.up()

tests.py:51: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/utils.py:34: in up
    op.run()
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/operations.py:150: in run
    self.engine.create_table(self.table_name, self.columns, self.primary_keys, **self.kw)
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/engine.py:97: in create_table
    self._log_and_exec(sql)
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/engine.py:92: in _log_and_exec
    self.adapter.execute(sql)
/usr/local/lib/python3.12/site-packages/pydal/adapters/__init__.py:67: in wrap
    return f(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <emmett.orm.engines.sqlite.SQLite object at 0xffff905b5a30>
args = ('CREATE TABLE "auth_groups"(\n    "id" INTEGER PRIMARY KEY AUTOINCREMENT,\n    "created_at" TIMESTAMP,\n    "updated_at" TIMESTAMP,\n    "role" CHAR(255) DEFAULT \'\' UNIQUE,\n    "description" TEXT\n);',)
kwargs = {}
command = 'CREATE TABLE "auth_groups"(\n    "id" INTEGER PRIMARY KEY AUTOINCREMENT,\n    "created_at" TIMESTAMP,\n    "updated_at" TIMESTAMP,\n    "role" CHAR(255) DEFAULT \'\' UNIQUE,\n    "description" TEXT\n);'
handlers = []

    @with_connection_or_raise
    def execute(self, *args, **kwargs):
        command = self.filter_sql_command(args[0])
        handlers = self._build_handlers_for_execution()
        for handler in handlers:
            handler.before_execute(command)
>       rv = self.cursor.execute(command, *args[1:], **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       sqlite3.OperationalError: table "auth_groups" already exists

/usr/local/lib/python3.12/site-packages/pydal/adapters/base.py:410: OperationalError
________________ ERROR at setup of test_openapi_spec_structure _________________

request = <SubRequest '_prepare_db' for <Function test_empty_db>>

    @pytest.fixture(scope='module', autouse=True)
    def _prepare_db(request):
        # Setup test database - drop and recreate all tables
        with db.connection():
            # Get all table names from the database
            tables = db.tables
    
            # Drop all tables manually to ensure clean state
            for table in tables:
                try:
                    db.executesql(f'DROP TABLE IF EXISTS "{table}"')
                except:
                    pass
    
            # Commit the drops
            db.commit()
    
            # Now create fresh schema
            migration = generate_runtime_migration(db)
>           migration.up()

tests.py:51: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/utils.py:34: in up
    op.run()
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/operations.py:150: in run
    self.engine.create_table(self.table_name, self.columns, self.primary_keys, **self.kw)
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/engine.py:97: in create_table
    self._log_and_exec(sql)
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/engine.py:92: in _log_and_exec
    self.adapter.execute(sql)
/usr/local/lib/python3.12/site-packages/pydal/adapters/__init__.py:67: in wrap
    return f(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <emmett.orm.engines.sqlite.SQLite object at 0xffff905b5a30>
args = ('CREATE TABLE "auth_groups"(\n    "id" INTEGER PRIMARY KEY AUTOINCREMENT,\n    "created_at" TIMESTAMP,\n    "updated_at" TIMESTAMP,\n    "role" CHAR(255) DEFAULT \'\' UNIQUE,\n    "description" TEXT\n);',)
kwargs = {}
command = 'CREATE TABLE "auth_groups"(\n    "id" INTEGER PRIMARY KEY AUTOINCREMENT,\n    "created_at" TIMESTAMP,\n    "updated_at" TIMESTAMP,\n    "role" CHAR(255) DEFAULT \'\' UNIQUE,\n    "description" TEXT\n);'
handlers = []

    @with_connection_or_raise
    def execute(self, *args, **kwargs):
        command = self.filter_sql_command(args[0])
        handlers = self._build_handlers_for_execution()
        for handler in handlers:
            handler.before_execute(command)
>       rv = self.cursor.execute(command, *args[1:], **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       sqlite3.OperationalError: table "auth_groups" already exists

/usr/local/lib/python3.12/site-packages/pydal/adapters/base.py:410: OperationalError
________________ ERROR at setup of test_openapi_spec_endpoints _________________

request = <SubRequest '_prepare_db' for <Function test_empty_db>>

    @pytest.fixture(scope='module', autouse=True)
    def _prepare_db(request):
        # Setup test database - drop and recreate all tables
        with db.connection():
            # Get all table names from the database
            tables = db.tables
    
            # Drop all tables manually to ensure clean state
            for table in tables:
                try:
                    db.executesql(f'DROP TABLE IF EXISTS "{table}"')
                except:
                    pass
    
            # Commit the drops
            db.commit()
    
            # Now create fresh schema
            migration = generate_runtime_migration(db)
>           migration.up()

tests.py:51: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/utils.py:34: in up
    op.run()
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/operations.py:150: in run
    self.engine.create_table(self.table_name, self.columns, self.primary_keys, **self.kw)
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/engine.py:97: in create_table
    self._log_and_exec(sql)
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/engine.py:92: in _log_and_exec
    self.adapter.execute(sql)
/usr/local/lib/python3.12/site-packages/pydal/adapters/__init__.py:67: in wrap
    return f(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <emmett.orm.engines.sqlite.SQLite object at 0xffff905b5a30>
args = ('CREATE TABLE "auth_groups"(\n    "id" INTEGER PRIMARY KEY AUTOINCREMENT,\n    "created_at" TIMESTAMP,\n    "updated_at" TIMESTAMP,\n    "role" CHAR(255) DEFAULT \'\' UNIQUE,\n    "description" TEXT\n);',)
kwargs = {}
command = 'CREATE TABLE "auth_groups"(\n    "id" INTEGER PRIMARY KEY AUTOINCREMENT,\n    "created_at" TIMESTAMP,\n    "updated_at" TIMESTAMP,\n    "role" CHAR(255) DEFAULT \'\' UNIQUE,\n    "description" TEXT\n);'
handlers = []

    @with_connection_or_raise
    def execute(self, *args, **kwargs):
        command = self.filter_sql_command(args[0])
        handlers = self._build_handlers_for_execution()
        for handler in handlers:
            handler.before_execute(command)
>       rv = self.cursor.execute(command, *args[1:], **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       sqlite3.OperationalError: table "auth_groups" already exists

/usr/local/lib/python3.12/site-packages/pydal/adapters/base.py:410: OperationalError
____________________ ERROR at setup of test_swagger_ui_page ____________________

request = <SubRequest '_prepare_db' for <Function test_empty_db>>

    @pytest.fixture(scope='module', autouse=True)
    def _prepare_db(request):
        # Setup test database - drop and recreate all tables
        with db.connection():
            # Get all table names from the database
            tables = db.tables
    
            # Drop all tables manually to ensure clean state
            for table in tables:
                try:
                    db.executesql(f'DROP TABLE IF EXISTS "{table}"')
                except:
                    pass
    
            # Commit the drops
            db.commit()
    
            # Now create fresh schema
            migration = generate_runtime_migration(db)
>           migration.up()

tests.py:51: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/utils.py:34: in up
    op.run()
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/operations.py:150: in run
    self.engine.create_table(self.table_name, self.columns, self.primary_keys, **self.kw)
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/engine.py:97: in create_table
    self._log_and_exec(sql)
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/engine.py:92: in _log_and_exec
    self.adapter.execute(sql)
/usr/local/lib/python3.12/site-packages/pydal/adapters/__init__.py:67: in wrap
    return f(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <emmett.orm.engines.sqlite.SQLite object at 0xffff905b5a30>
args = ('CREATE TABLE "auth_groups"(\n    "id" INTEGER PRIMARY KEY AUTOINCREMENT,\n    "created_at" TIMESTAMP,\n    "updated_at" TIMESTAMP,\n    "role" CHAR(255) DEFAULT \'\' UNIQUE,\n    "description" TEXT\n);',)
kwargs = {}
command = 'CREATE TABLE "auth_groups"(\n    "id" INTEGER PRIMARY KEY AUTOINCREMENT,\n    "created_at" TIMESTAMP,\n    "updated_at" TIMESTAMP,\n    "role" CHAR(255) DEFAULT \'\' UNIQUE,\n    "description" TEXT\n);'
handlers = []

    @with_connection_or_raise
    def execute(self, *args, **kwargs):
        command = self.filter_sql_command(args[0])
        handlers = self._build_handlers_for_execution()
        for handler in handlers:
            handler.before_execute(command)
>       rv = self.cursor.execute(command, *args[1:], **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       sqlite3.OperationalError: table "auth_groups" already exists

/usr/local/lib/python3.12/site-packages/pydal/adapters/base.py:410: OperationalError
_______________________ ERROR at setup of test_api_root ________________________

request = <SubRequest '_prepare_db' for <Function test_empty_db>>

    @pytest.fixture(scope='module', autouse=True)
    def _prepare_db(request):
        # Setup test database - drop and recreate all tables
        with db.connection():
            # Get all table names from the database
            tables = db.tables
    
            # Drop all tables manually to ensure clean state
            for table in tables:
                try:
                    db.executesql(f'DROP TABLE IF EXISTS "{table}"')
                except:
                    pass
    
            # Commit the drops
            db.commit()
    
            # Now create fresh schema
            migration = generate_runtime_migration(db)
>           migration.up()

tests.py:51: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/utils.py:34: in up
    op.run()
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/operations.py:150: in run
    self.engine.create_table(self.table_name, self.columns, self.primary_keys, **self.kw)
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/engine.py:97: in create_table
    self._log_and_exec(sql)
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/engine.py:92: in _log_and_exec
    self.adapter.execute(sql)
/usr/local/lib/python3.12/site-packages/pydal/adapters/__init__.py:67: in wrap
    return f(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <emmett.orm.engines.sqlite.SQLite object at 0xffff905b5a30>
args = ('CREATE TABLE "auth_groups"(\n    "id" INTEGER PRIMARY KEY AUTOINCREMENT,\n    "created_at" TIMESTAMP,\n    "updated_at" TIMESTAMP,\n    "role" CHAR(255) DEFAULT \'\' UNIQUE,\n    "description" TEXT\n);',)
kwargs = {}
command = 'CREATE TABLE "auth_groups"(\n    "id" INTEGER PRIMARY KEY AUTOINCREMENT,\n    "created_at" TIMESTAMP,\n    "updated_at" TIMESTAMP,\n    "role" CHAR(255) DEFAULT \'\' UNIQUE,\n    "description" TEXT\n);'
handlers = []

    @with_connection_or_raise
    def execute(self, *args, **kwargs):
        command = self.filter_sql_command(args[0])
        handlers = self._build_handlers_for_execution()
        for handler in handlers:
            handler.before_execute(command)
>       rv = self.cursor.execute(command, *args[1:], **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       sqlite3.OperationalError: table "auth_groups" already exists

/usr/local/lib/python3.12/site-packages/pydal/adapters/base.py:410: OperationalError
__________________ ERROR at setup of test_login_page_renders ___________________

request = <SubRequest '_prepare_db' for <Function test_empty_db>>

    @pytest.fixture(scope='module', autouse=True)
    def _prepare_db(request):
        # Setup test database - drop and recreate all tables
        with db.connection():
            # Get all table names from the database
            tables = db.tables
    
            # Drop all tables manually to ensure clean state
            for table in tables:
                try:
                    db.executesql(f'DROP TABLE IF EXISTS "{table}"')
                except:
                    pass
    
            # Commit the drops
            db.commit()
    
            # Now create fresh schema
            migration = generate_runtime_migration(db)
>           migration.up()

tests.py:51: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/utils.py:34: in up
    op.run()
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/operations.py:150: in run
    self.engine.create_table(self.table_name, self.columns, self.primary_keys, **self.kw)
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/engine.py:97: in create_table
    self._log_and_exec(sql)
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/engine.py:92: in _log_and_exec
    self.adapter.execute(sql)
/usr/local/lib/python3.12/site-packages/pydal/adapters/__init__.py:67: in wrap
    return f(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <emmett.orm.engines.sqlite.SQLite object at 0xffff905b5a30>
args = ('CREATE TABLE "auth_groups"(\n    "id" INTEGER PRIMARY KEY AUTOINCREMENT,\n    "created_at" TIMESTAMP,\n    "updated_at" TIMESTAMP,\n    "role" CHAR(255) DEFAULT \'\' UNIQUE,\n    "description" TEXT\n);',)
kwargs = {}
command = 'CREATE TABLE "auth_groups"(\n    "id" INTEGER PRIMARY KEY AUTOINCREMENT,\n    "created_at" TIMESTAMP,\n    "updated_at" TIMESTAMP,\n    "role" CHAR(255) DEFAULT \'\' UNIQUE,\n    "description" TEXT\n);'
handlers = []

    @with_connection_or_raise
    def execute(self, *args, **kwargs):
        command = self.filter_sql_command(args[0])
        handlers = self._build_handlers_for_execution()
        for handler in handlers:
            handler.before_execute(command)
>       rv = self.cursor.execute(command, *args[1:], **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       sqlite3.OperationalError: table "auth_groups" already exists

/usr/local/lib/python3.12/site-packages/pydal/adapters/base.py:410: OperationalError
_______________ ERROR at setup of test_login_correct_credentials _______________

request = <SubRequest '_prepare_db' for <Function test_empty_db>>

    @pytest.fixture(scope='module', autouse=True)
    def _prepare_db(request):
        # Setup test database - drop and recreate all tables
        with db.connection():
            # Get all table names from the database
            tables = db.tables
    
            # Drop all tables manually to ensure clean state
            for table in tables:
                try:
                    db.executesql(f'DROP TABLE IF EXISTS "{table}"')
                except:
                    pass
    
            # Commit the drops
            db.commit()
    
            # Now create fresh schema
            migration = generate_runtime_migration(db)
>           migration.up()

tests.py:51: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/utils.py:34: in up
    op.run()
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/operations.py:150: in run
    self.engine.create_table(self.table_name, self.columns, self.primary_keys, **self.kw)
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/engine.py:97: in create_table
    self._log_and_exec(sql)
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/engine.py:92: in _log_and_exec
    self.adapter.execute(sql)
/usr/local/lib/python3.12/site-packages/pydal/adapters/__init__.py:67: in wrap
    return f(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <emmett.orm.engines.sqlite.SQLite object at 0xffff905b5a30>
args = ('CREATE TABLE "auth_groups"(\n    "id" INTEGER PRIMARY KEY AUTOINCREMENT,\n    "created_at" TIMESTAMP,\n    "updated_at" TIMESTAMP,\n    "role" CHAR(255) DEFAULT \'\' UNIQUE,\n    "description" TEXT\n);',)
kwargs = {}
command = 'CREATE TABLE "auth_groups"(\n    "id" INTEGER PRIMARY KEY AUTOINCREMENT,\n    "created_at" TIMESTAMP,\n    "updated_at" TIMESTAMP,\n    "role" CHAR(255) DEFAULT \'\' UNIQUE,\n    "description" TEXT\n);'
handlers = []

    @with_connection_or_raise
    def execute(self, *args, **kwargs):
        command = self.filter_sql_command(args[0])
        handlers = self._build_handlers_for_execution()
        for handler in handlers:
            handler.before_execute(command)
>       rv = self.cursor.execute(command, *args[1:], **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       sqlite3.OperationalError: table "auth_groups" already exists

/usr/local/lib/python3.12/site-packages/pydal/adapters/base.py:410: OperationalError
_______________ ERROR at setup of test_login_incorrect_password ________________

request = <SubRequest '_prepare_db' for <Function test_empty_db>>

    @pytest.fixture(scope='module', autouse=True)
    def _prepare_db(request):
        # Setup test database - drop and recreate all tables
        with db.connection():
            # Get all table names from the database
            tables = db.tables
    
            # Drop all tables manually to ensure clean state
            for table in tables:
                try:
                    db.executesql(f'DROP TABLE IF EXISTS "{table}"')
                except:
                    pass
    
            # Commit the drops
            db.commit()
    
            # Now create fresh schema
            migration = generate_runtime_migration(db)
>           migration.up()

tests.py:51: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/utils.py:34: in up
    op.run()
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/operations.py:150: in run
    self.engine.create_table(self.table_name, self.columns, self.primary_keys, **self.kw)
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/engine.py:97: in create_table
    self._log_and_exec(sql)
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/engine.py:92: in _log_and_exec
    self.adapter.execute(sql)
/usr/local/lib/python3.12/site-packages/pydal/adapters/__init__.py:67: in wrap
    return f(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <emmett.orm.engines.sqlite.SQLite object at 0xffff905b5a30>
args = ('CREATE TABLE "auth_groups"(\n    "id" INTEGER PRIMARY KEY AUTOINCREMENT,\n    "created_at" TIMESTAMP,\n    "updated_at" TIMESTAMP,\n    "role" CHAR(255) DEFAULT \'\' UNIQUE,\n    "description" TEXT\n);',)
kwargs = {}
command = 'CREATE TABLE "auth_groups"(\n    "id" INTEGER PRIMARY KEY AUTOINCREMENT,\n    "created_at" TIMESTAMP,\n    "updated_at" TIMESTAMP,\n    "role" CHAR(255) DEFAULT \'\' UNIQUE,\n    "description" TEXT\n);'
handlers = []

    @with_connection_or_raise
    def execute(self, *args, **kwargs):
        command = self.filter_sql_command(args[0])
        handlers = self._build_handlers_for_execution()
        for handler in handlers:
            handler.before_execute(command)
>       rv = self.cursor.execute(command, *args[1:], **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       sqlite3.OperationalError: table "auth_groups" already exists

/usr/local/lib/python3.12/site-packages/pydal/adapters/base.py:410: OperationalError
________________ ERROR at setup of test_login_nonexistent_email ________________

request = <SubRequest '_prepare_db' for <Function test_empty_db>>

    @pytest.fixture(scope='module', autouse=True)
    def _prepare_db(request):
        # Setup test database - drop and recreate all tables
        with db.connection():
            # Get all table names from the database
            tables = db.tables
    
            # Drop all tables manually to ensure clean state
            for table in tables:
                try:
                    db.executesql(f'DROP TABLE IF EXISTS "{table}"')
                except:
                    pass
    
            # Commit the drops
            db.commit()
    
            # Now create fresh schema
            migration = generate_runtime_migration(db)
>           migration.up()

tests.py:51: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/utils.py:34: in up
    op.run()
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/operations.py:150: in run
    self.engine.create_table(self.table_name, self.columns, self.primary_keys, **self.kw)
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/engine.py:97: in create_table
    self._log_and_exec(sql)
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/engine.py:92: in _log_and_exec
    self.adapter.execute(sql)
/usr/local/lib/python3.12/site-packages/pydal/adapters/__init__.py:67: in wrap
    return f(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <emmett.orm.engines.sqlite.SQLite object at 0xffff905b5a30>
args = ('CREATE TABLE "auth_groups"(\n    "id" INTEGER PRIMARY KEY AUTOINCREMENT,\n    "created_at" TIMESTAMP,\n    "updated_at" TIMESTAMP,\n    "role" CHAR(255) DEFAULT \'\' UNIQUE,\n    "description" TEXT\n);',)
kwargs = {}
command = 'CREATE TABLE "auth_groups"(\n    "id" INTEGER PRIMARY KEY AUTOINCREMENT,\n    "created_at" TIMESTAMP,\n    "updated_at" TIMESTAMP,\n    "role" CHAR(255) DEFAULT \'\' UNIQUE,\n    "description" TEXT\n);'
handlers = []

    @with_connection_or_raise
    def execute(self, *args, **kwargs):
        command = self.filter_sql_command(args[0])
        handlers = self._build_handlers_for_execution()
        for handler in handlers:
            handler.before_execute(command)
>       rv = self.cursor.execute(command, *args[1:], **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       sqlite3.OperationalError: table "auth_groups" already exists

/usr/local/lib/python3.12/site-packages/pydal/adapters/base.py:410: OperationalError
________________________ ERROR at setup of test_logout _________________________

request = <SubRequest '_prepare_db' for <Function test_empty_db>>

    @pytest.fixture(scope='module', autouse=True)
    def _prepare_db(request):
        # Setup test database - drop and recreate all tables
        with db.connection():
            # Get all table names from the database
            tables = db.tables
    
            # Drop all tables manually to ensure clean state
            for table in tables:
                try:
                    db.executesql(f'DROP TABLE IF EXISTS "{table}"')
                except:
                    pass
    
            # Commit the drops
            db.commit()
    
            # Now create fresh schema
            migration = generate_runtime_migration(db)
>           migration.up()

tests.py:51: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/utils.py:34: in up
    op.run()
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/operations.py:150: in run
    self.engine.create_table(self.table_name, self.columns, self.primary_keys, **self.kw)
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/engine.py:97: in create_table
    self._log_and_exec(sql)
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/engine.py:92: in _log_and_exec
    self.adapter.execute(sql)
/usr/local/lib/python3.12/site-packages/pydal/adapters/__init__.py:67: in wrap
    return f(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <emmett.orm.engines.sqlite.SQLite object at 0xffff905b5a30>
args = ('CREATE TABLE "auth_groups"(\n    "id" INTEGER PRIMARY KEY AUTOINCREMENT,\n    "created_at" TIMESTAMP,\n    "updated_at" TIMESTAMP,\n    "role" CHAR(255) DEFAULT \'\' UNIQUE,\n    "description" TEXT\n);',)
kwargs = {}
command = 'CREATE TABLE "auth_groups"(\n    "id" INTEGER PRIMARY KEY AUTOINCREMENT,\n    "created_at" TIMESTAMP,\n    "updated_at" TIMESTAMP,\n    "role" CHAR(255) DEFAULT \'\' UNIQUE,\n    "description" TEXT\n);'
handlers = []

    @with_connection_or_raise
    def execute(self, *args, **kwargs):
        command = self.filter_sql_command(args[0])
        handlers = self._build_handlers_for_execution()
        for handler in handlers:
            handler.before_execute(command)
>       rv = self.cursor.execute(command, *args[1:], **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       sqlite3.OperationalError: table "auth_groups" already exists

/usr/local/lib/python3.12/site-packages/pydal/adapters/base.py:410: OperationalError
_________________ ERROR at setup of test_valkey_basic_set_get __________________

request = <SubRequest '_prepare_db' for <Function test_empty_db>>

    @pytest.fixture(scope='module', autouse=True)
    def _prepare_db(request):
        # Setup test database - drop and recreate all tables
        with db.connection():
            # Get all table names from the database
            tables = db.tables
    
            # Drop all tables manually to ensure clean state
            for table in tables:
                try:
                    db.executesql(f'DROP TABLE IF EXISTS "{table}"')
                except:
                    pass
    
            # Commit the drops
            db.commit()
    
            # Now create fresh schema
            migration = generate_runtime_migration(db)
>           migration.up()

tests.py:51: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/utils.py:34: in up
    op.run()
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/operations.py:150: in run
    self.engine.create_table(self.table_name, self.columns, self.primary_keys, **self.kw)
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/engine.py:97: in create_table
    self._log_and_exec(sql)
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/engine.py:92: in _log_and_exec
    self.adapter.execute(sql)
/usr/local/lib/python3.12/site-packages/pydal/adapters/__init__.py:67: in wrap
    return f(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <emmett.orm.engines.sqlite.SQLite object at 0xffff905b5a30>
args = ('CREATE TABLE "auth_groups"(\n    "id" INTEGER PRIMARY KEY AUTOINCREMENT,\n    "created_at" TIMESTAMP,\n    "updated_at" TIMESTAMP,\n    "role" CHAR(255) DEFAULT \'\' UNIQUE,\n    "description" TEXT\n);',)
kwargs = {}
command = 'CREATE TABLE "auth_groups"(\n    "id" INTEGER PRIMARY KEY AUTOINCREMENT,\n    "created_at" TIMESTAMP,\n    "updated_at" TIMESTAMP,\n    "role" CHAR(255) DEFAULT \'\' UNIQUE,\n    "description" TEXT\n);'
handlers = []

    @with_connection_or_raise
    def execute(self, *args, **kwargs):
        command = self.filter_sql_command(args[0])
        handlers = self._build_handlers_for_execution()
        for handler in handlers:
            handler.before_execute(command)
>       rv = self.cursor.execute(command, *args[1:], **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       sqlite3.OperationalError: table "auth_groups" already exists

/usr/local/lib/python3.12/site-packages/pydal/adapters/base.py:410: OperationalError
___________________ ERROR at setup of test_valkey_expiration ___________________

request = <SubRequest '_prepare_db' for <Function test_empty_db>>

    @pytest.fixture(scope='module', autouse=True)
    def _prepare_db(request):
        # Setup test database - drop and recreate all tables
        with db.connection():
            # Get all table names from the database
            tables = db.tables
    
            # Drop all tables manually to ensure clean state
            for table in tables:
                try:
                    db.executesql(f'DROP TABLE IF EXISTS "{table}"')
                except:
                    pass
    
            # Commit the drops
            db.commit()
    
            # Now create fresh schema
            migration = generate_runtime_migration(db)
>           migration.up()

tests.py:51: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/utils.py:34: in up
    op.run()
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/operations.py:150: in run
    self.engine.create_table(self.table_name, self.columns, self.primary_keys, **self.kw)
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/engine.py:97: in create_table
    self._log_and_exec(sql)
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/engine.py:92: in _log_and_exec
    self.adapter.execute(sql)
/usr/local/lib/python3.12/site-packages/pydal/adapters/__init__.py:67: in wrap
    return f(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <emmett.orm.engines.sqlite.SQLite object at 0xffff905b5a30>
args = ('CREATE TABLE "auth_groups"(\n    "id" INTEGER PRIMARY KEY AUTOINCREMENT,\n    "created_at" TIMESTAMP,\n    "updated_at" TIMESTAMP,\n    "role" CHAR(255) DEFAULT \'\' UNIQUE,\n    "description" TEXT\n);',)
kwargs = {}
command = 'CREATE TABLE "auth_groups"(\n    "id" INTEGER PRIMARY KEY AUTOINCREMENT,\n    "created_at" TIMESTAMP,\n    "updated_at" TIMESTAMP,\n    "role" CHAR(255) DEFAULT \'\' UNIQUE,\n    "description" TEXT\n);'
handlers = []

    @with_connection_or_raise
    def execute(self, *args, **kwargs):
        command = self.filter_sql_command(args[0])
        handlers = self._build_handlers_for_execution()
        for handler in handlers:
            handler.before_execute(command)
>       rv = self.cursor.execute(command, *args[1:], **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       sqlite3.OperationalError: table "auth_groups" already exists

/usr/local/lib/python3.12/site-packages/pydal/adapters/base.py:410: OperationalError
________________ ERROR at setup of test_valkey_clear_single_key ________________

request = <SubRequest '_prepare_db' for <Function test_empty_db>>

    @pytest.fixture(scope='module', autouse=True)
    def _prepare_db(request):
        # Setup test database - drop and recreate all tables
        with db.connection():
            # Get all table names from the database
            tables = db.tables
    
            # Drop all tables manually to ensure clean state
            for table in tables:
                try:
                    db.executesql(f'DROP TABLE IF EXISTS "{table}"')
                except:
                    pass
    
            # Commit the drops
            db.commit()
    
            # Now create fresh schema
            migration = generate_runtime_migration(db)
>           migration.up()

tests.py:51: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/utils.py:34: in up
    op.run()
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/operations.py:150: in run
    self.engine.create_table(self.table_name, self.columns, self.primary_keys, **self.kw)
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/engine.py:97: in create_table
    self._log_and_exec(sql)
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/engine.py:92: in _log_and_exec
    self.adapter.execute(sql)
/usr/local/lib/python3.12/site-packages/pydal/adapters/__init__.py:67: in wrap
    return f(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <emmett.orm.engines.sqlite.SQLite object at 0xffff905b5a30>
args = ('CREATE TABLE "auth_groups"(\n    "id" INTEGER PRIMARY KEY AUTOINCREMENT,\n    "created_at" TIMESTAMP,\n    "updated_at" TIMESTAMP,\n    "role" CHAR(255) DEFAULT \'\' UNIQUE,\n    "description" TEXT\n);',)
kwargs = {}
command = 'CREATE TABLE "auth_groups"(\n    "id" INTEGER PRIMARY KEY AUTOINCREMENT,\n    "created_at" TIMESTAMP,\n    "updated_at" TIMESTAMP,\n    "role" CHAR(255) DEFAULT \'\' UNIQUE,\n    "description" TEXT\n);'
handlers = []

    @with_connection_or_raise
    def execute(self, *args, **kwargs):
        command = self.filter_sql_command(args[0])
        handlers = self._build_handlers_for_execution()
        for handler in handlers:
            handler.before_execute(command)
>       rv = self.cursor.execute(command, *args[1:], **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       sqlite3.OperationalError: table "auth_groups" already exists

/usr/local/lib/python3.12/site-packages/pydal/adapters/base.py:410: OperationalError
_________________ ERROR at setup of test_valkey_pattern_clear __________________

request = <SubRequest '_prepare_db' for <Function test_empty_db>>

    @pytest.fixture(scope='module', autouse=True)
    def _prepare_db(request):
        # Setup test database - drop and recreate all tables
        with db.connection():
            # Get all table names from the database
            tables = db.tables
    
            # Drop all tables manually to ensure clean state
            for table in tables:
                try:
                    db.executesql(f'DROP TABLE IF EXISTS "{table}"')
                except:
                    pass
    
            # Commit the drops
            db.commit()
    
            # Now create fresh schema
            migration = generate_runtime_migration(db)
>           migration.up()

tests.py:51: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/utils.py:34: in up
    op.run()
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/operations.py:150: in run
    self.engine.create_table(self.table_name, self.columns, self.primary_keys, **self.kw)
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/engine.py:97: in create_table
    self._log_and_exec(sql)
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/engine.py:92: in _log_and_exec
    self.adapter.execute(sql)
/usr/local/lib/python3.12/site-packages/pydal/adapters/__init__.py:67: in wrap
    return f(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <emmett.orm.engines.sqlite.SQLite object at 0xffff905b5a30>
args = ('CREATE TABLE "auth_groups"(\n    "id" INTEGER PRIMARY KEY AUTOINCREMENT,\n    "created_at" TIMESTAMP,\n    "updated_at" TIMESTAMP,\n    "role" CHAR(255) DEFAULT \'\' UNIQUE,\n    "description" TEXT\n);',)
kwargs = {}
command = 'CREATE TABLE "auth_groups"(\n    "id" INTEGER PRIMARY KEY AUTOINCREMENT,\n    "created_at" TIMESTAMP,\n    "updated_at" TIMESTAMP,\n    "role" CHAR(255) DEFAULT \'\' UNIQUE,\n    "description" TEXT\n);'
handlers = []

    @with_connection_or_raise
    def execute(self, *args, **kwargs):
        command = self.filter_sql_command(args[0])
        handlers = self._build_handlers_for_execution()
        for handler in handlers:
            handler.before_execute(command)
>       rv = self.cursor.execute(command, *args[1:], **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       sqlite3.OperationalError: table "auth_groups" already exists

/usr/local/lib/python3.12/site-packages/pydal/adapters/base.py:410: OperationalError
__________________ ERROR at setup of test_valkey_complex_data __________________

request = <SubRequest '_prepare_db' for <Function test_empty_db>>

    @pytest.fixture(scope='module', autouse=True)
    def _prepare_db(request):
        # Setup test database - drop and recreate all tables
        with db.connection():
            # Get all table names from the database
            tables = db.tables
    
            # Drop all tables manually to ensure clean state
            for table in tables:
                try:
                    db.executesql(f'DROP TABLE IF EXISTS "{table}"')
                except:
                    pass
    
            # Commit the drops
            db.commit()
    
            # Now create fresh schema
            migration = generate_runtime_migration(db)
>           migration.up()

tests.py:51: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/utils.py:34: in up
    op.run()
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/operations.py:150: in run
    self.engine.create_table(self.table_name, self.columns, self.primary_keys, **self.kw)
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/engine.py:97: in create_table
    self._log_and_exec(sql)
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/engine.py:92: in _log_and_exec
    self.adapter.execute(sql)
/usr/local/lib/python3.12/site-packages/pydal/adapters/__init__.py:67: in wrap
    return f(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <emmett.orm.engines.sqlite.SQLite object at 0xffff905b5a30>
args = ('CREATE TABLE "auth_groups"(\n    "id" INTEGER PRIMARY KEY AUTOINCREMENT,\n    "created_at" TIMESTAMP,\n    "updated_at" TIMESTAMP,\n    "role" CHAR(255) DEFAULT \'\' UNIQUE,\n    "description" TEXT\n);',)
kwargs = {}
command = 'CREATE TABLE "auth_groups"(\n    "id" INTEGER PRIMARY KEY AUTOINCREMENT,\n    "created_at" TIMESTAMP,\n    "updated_at" TIMESTAMP,\n    "role" CHAR(255) DEFAULT \'\' UNIQUE,\n    "description" TEXT\n);'
handlers = []

    @with_connection_or_raise
    def execute(self, *args, **kwargs):
        command = self.filter_sql_command(args[0])
        handlers = self._build_handlers_for_execution()
        for handler in handlers:
            handler.before_execute(command)
>       rv = self.cursor.execute(command, *args[1:], **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       sqlite3.OperationalError: table "auth_groups" already exists

/usr/local/lib/python3.12/site-packages/pydal/adapters/base.py:410: OperationalError
___________________ ERROR at setup of test_valkey_get_or_set ___________________

request = <SubRequest '_prepare_db' for <Function test_empty_db>>

    @pytest.fixture(scope='module', autouse=True)
    def _prepare_db(request):
        # Setup test database - drop and recreate all tables
        with db.connection():
            # Get all table names from the database
            tables = db.tables
    
            # Drop all tables manually to ensure clean state
            for table in tables:
                try:
                    db.executesql(f'DROP TABLE IF EXISTS "{table}"')
                except:
                    pass
    
            # Commit the drops
            db.commit()
    
            # Now create fresh schema
            migration = generate_runtime_migration(db)
>           migration.up()

tests.py:51: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/utils.py:34: in up
    op.run()
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/operations.py:150: in run
    self.engine.create_table(self.table_name, self.columns, self.primary_keys, **self.kw)
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/engine.py:97: in create_table
    self._log_and_exec(sql)
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/engine.py:92: in _log_and_exec
    self.adapter.execute(sql)
/usr/local/lib/python3.12/site-packages/pydal/adapters/__init__.py:67: in wrap
    return f(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <emmett.orm.engines.sqlite.SQLite object at 0xffff905b5a30>
args = ('CREATE TABLE "auth_groups"(\n    "id" INTEGER PRIMARY KEY AUTOINCREMENT,\n    "created_at" TIMESTAMP,\n    "updated_at" TIMESTAMP,\n    "role" CHAR(255) DEFAULT \'\' UNIQUE,\n    "description" TEXT\n);',)
kwargs = {}
command = 'CREATE TABLE "auth_groups"(\n    "id" INTEGER PRIMARY KEY AUTOINCREMENT,\n    "created_at" TIMESTAMP,\n    "updated_at" TIMESTAMP,\n    "role" CHAR(255) DEFAULT \'\' UNIQUE,\n    "description" TEXT\n);'
handlers = []

    @with_connection_or_raise
    def execute(self, *args, **kwargs):
        command = self.filter_sql_command(args[0])
        handlers = self._build_handlers_for_execution()
        for handler in handlers:
            handler.before_execute(command)
>       rv = self.cursor.execute(command, *args[1:], **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       sqlite3.OperationalError: table "auth_groups" already exists

/usr/local/lib/python3.12/site-packages/pydal/adapters/base.py:410: OperationalError
________________ ERROR at setup of test_valkey_async_operations ________________

request = <SubRequest '_prepare_db' for <Function test_empty_db>>

    @pytest.fixture(scope='module', autouse=True)
    def _prepare_db(request):
        # Setup test database - drop and recreate all tables
        with db.connection():
            # Get all table names from the database
            tables = db.tables
    
            # Drop all tables manually to ensure clean state
            for table in tables:
                try:
                    db.executesql(f'DROP TABLE IF EXISTS "{table}"')
                except:
                    pass
    
            # Commit the drops
            db.commit()
    
            # Now create fresh schema
            migration = generate_runtime_migration(db)
>           migration.up()

tests.py:51: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/utils.py:34: in up
    op.run()
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/operations.py:150: in run
    self.engine.create_table(self.table_name, self.columns, self.primary_keys, **self.kw)
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/engine.py:97: in create_table
    self._log_and_exec(sql)
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/engine.py:92: in _log_and_exec
    self.adapter.execute(sql)
/usr/local/lib/python3.12/site-packages/pydal/adapters/__init__.py:67: in wrap
    return f(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <emmett.orm.engines.sqlite.SQLite object at 0xffff905b5a30>
args = ('CREATE TABLE "auth_groups"(\n    "id" INTEGER PRIMARY KEY AUTOINCREMENT,\n    "created_at" TIMESTAMP,\n    "updated_at" TIMESTAMP,\n    "role" CHAR(255) DEFAULT \'\' UNIQUE,\n    "description" TEXT\n);',)
kwargs = {}
command = 'CREATE TABLE "auth_groups"(\n    "id" INTEGER PRIMARY KEY AUTOINCREMENT,\n    "created_at" TIMESTAMP,\n    "updated_at" TIMESTAMP,\n    "role" CHAR(255) DEFAULT \'\' UNIQUE,\n    "description" TEXT\n);'
handlers = []

    @with_connection_or_raise
    def execute(self, *args, **kwargs):
        command = self.filter_sql_command(args[0])
        handlers = self._build_handlers_for_execution()
        for handler in handlers:
            handler.before_execute(command)
>       rv = self.cursor.execute(command, *args[1:], **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       sqlite3.OperationalError: table "auth_groups" already exists

/usr/local/lib/python3.12/site-packages/pydal/adapters/base.py:410: OperationalError
_____________________ ERROR at setup of test_valkey_prefix _____________________

request = <SubRequest '_prepare_db' for <Function test_empty_db>>

    @pytest.fixture(scope='module', autouse=True)
    def _prepare_db(request):
        # Setup test database - drop and recreate all tables
        with db.connection():
            # Get all table names from the database
            tables = db.tables
    
            # Drop all tables manually to ensure clean state
            for table in tables:
                try:
                    db.executesql(f'DROP TABLE IF EXISTS "{table}"')
                except:
                    pass
    
            # Commit the drops
            db.commit()
    
            # Now create fresh schema
            migration = generate_runtime_migration(db)
>           migration.up()

tests.py:51: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/utils.py:34: in up
    op.run()
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/operations.py:150: in run
    self.engine.create_table(self.table_name, self.columns, self.primary_keys, **self.kw)
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/engine.py:97: in create_table
    self._log_and_exec(sql)
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/engine.py:92: in _log_and_exec
    self.adapter.execute(sql)
/usr/local/lib/python3.12/site-packages/pydal/adapters/__init__.py:67: in wrap
    return f(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <emmett.orm.engines.sqlite.SQLite object at 0xffff905b5a30>
args = ('CREATE TABLE "auth_groups"(\n    "id" INTEGER PRIMARY KEY AUTOINCREMENT,\n    "created_at" TIMESTAMP,\n    "updated_at" TIMESTAMP,\n    "role" CHAR(255) DEFAULT \'\' UNIQUE,\n    "description" TEXT\n);',)
kwargs = {}
command = 'CREATE TABLE "auth_groups"(\n    "id" INTEGER PRIMARY KEY AUTOINCREMENT,\n    "created_at" TIMESTAMP,\n    "updated_at" TIMESTAMP,\n    "role" CHAR(255) DEFAULT \'\' UNIQUE,\n    "description" TEXT\n);'
handlers = []

    @with_connection_or_raise
    def execute(self, *args, **kwargs):
        command = self.filter_sql_command(args[0])
        handlers = self._build_handlers_for_execution()
        for handler in handlers:
            handler.before_execute(command)
>       rv = self.cursor.execute(command, *args[1:], **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       sqlite3.OperationalError: table "auth_groups" already exists

/usr/local/lib/python3.12/site-packages/pydal/adapters/base.py:410: OperationalError
________________ ERROR at setup of test_valkey_nonexistent_key _________________

request = <SubRequest '_prepare_db' for <Function test_empty_db>>

    @pytest.fixture(scope='module', autouse=True)
    def _prepare_db(request):
        # Setup test database - drop and recreate all tables
        with db.connection():
            # Get all table names from the database
            tables = db.tables
    
            # Drop all tables manually to ensure clean state
            for table in tables:
                try:
                    db.executesql(f'DROP TABLE IF EXISTS "{table}"')
                except:
                    pass
    
            # Commit the drops
            db.commit()
    
            # Now create fresh schema
            migration = generate_runtime_migration(db)
>           migration.up()

tests.py:51: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/utils.py:34: in up
    op.run()
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/operations.py:150: in run
    self.engine.create_table(self.table_name, self.columns, self.primary_keys, **self.kw)
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/engine.py:97: in create_table
    self._log_and_exec(sql)
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/engine.py:92: in _log_and_exec
    self.adapter.execute(sql)
/usr/local/lib/python3.12/site-packages/pydal/adapters/__init__.py:67: in wrap
    return f(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <emmett.orm.engines.sqlite.SQLite object at 0xffff905b5a30>
args = ('CREATE TABLE "auth_groups"(\n    "id" INTEGER PRIMARY KEY AUTOINCREMENT,\n    "created_at" TIMESTAMP,\n    "updated_at" TIMESTAMP,\n    "role" CHAR(255) DEFAULT \'\' UNIQUE,\n    "description" TEXT\n);',)
kwargs = {}
command = 'CREATE TABLE "auth_groups"(\n    "id" INTEGER PRIMARY KEY AUTOINCREMENT,\n    "created_at" TIMESTAMP,\n    "updated_at" TIMESTAMP,\n    "role" CHAR(255) DEFAULT \'\' UNIQUE,\n    "description" TEXT\n);'
handlers = []

    @with_connection_or_raise
    def execute(self, *args, **kwargs):
        command = self.filter_sql_command(args[0])
        handlers = self._build_handlers_for_execution()
        for handler in handlers:
            handler.before_execute(command)
>       rv = self.cursor.execute(command, *args[1:], **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       sqlite3.OperationalError: table "auth_groups" already exists

/usr/local/lib/python3.12/site-packages/pydal/adapters/base.py:410: OperationalError
________ ERROR at setup of test_cache_integration_expensive_computation ________

request = <SubRequest '_prepare_db' for <Function test_empty_db>>

    @pytest.fixture(scope='module', autouse=True)
    def _prepare_db(request):
        # Setup test database - drop and recreate all tables
        with db.connection():
            # Get all table names from the database
            tables = db.tables
    
            # Drop all tables manually to ensure clean state
            for table in tables:
                try:
                    db.executesql(f'DROP TABLE IF EXISTS "{table}"')
                except:
                    pass
    
            # Commit the drops
            db.commit()
    
            # Now create fresh schema
            migration = generate_runtime_migration(db)
>           migration.up()

tests.py:51: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/utils.py:34: in up
    op.run()
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/operations.py:150: in run
    self.engine.create_table(self.table_name, self.columns, self.primary_keys, **self.kw)
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/engine.py:97: in create_table
    self._log_and_exec(sql)
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/engine.py:92: in _log_and_exec
    self.adapter.execute(sql)
/usr/local/lib/python3.12/site-packages/pydal/adapters/__init__.py:67: in wrap
    return f(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <emmett.orm.engines.sqlite.SQLite object at 0xffff905b5a30>
args = ('CREATE TABLE "auth_groups"(\n    "id" INTEGER PRIMARY KEY AUTOINCREMENT,\n    "created_at" TIMESTAMP,\n    "updated_at" TIMESTAMP,\n    "role" CHAR(255) DEFAULT \'\' UNIQUE,\n    "description" TEXT\n);',)
kwargs = {}
command = 'CREATE TABLE "auth_groups"(\n    "id" INTEGER PRIMARY KEY AUTOINCREMENT,\n    "created_at" TIMESTAMP,\n    "updated_at" TIMESTAMP,\n    "role" CHAR(255) DEFAULT \'\' UNIQUE,\n    "description" TEXT\n);'
handlers = []

    @with_connection_or_raise
    def execute(self, *args, **kwargs):
        command = self.filter_sql_command(args[0])
        handlers = self._build_handlers_for_execution()
        for handler in handlers:
            handler.before_execute(command)
>       rv = self.cursor.execute(command, *args[1:], **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       sqlite3.OperationalError: table "auth_groups" already exists

/usr/local/lib/python3.12/site-packages/pydal/adapters/base.py:410: OperationalError
__________ ERROR at setup of test_cache_integration_session_like_data __________

request = <SubRequest '_prepare_db' for <Function test_empty_db>>

    @pytest.fixture(scope='module', autouse=True)
    def _prepare_db(request):
        # Setup test database - drop and recreate all tables
        with db.connection():
            # Get all table names from the database
            tables = db.tables
    
            # Drop all tables manually to ensure clean state
            for table in tables:
                try:
                    db.executesql(f'DROP TABLE IF EXISTS "{table}"')
                except:
                    pass
    
            # Commit the drops
            db.commit()
    
            # Now create fresh schema
            migration = generate_runtime_migration(db)
>           migration.up()

tests.py:51: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/utils.py:34: in up
    op.run()
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/operations.py:150: in run
    self.engine.create_table(self.table_name, self.columns, self.primary_keys, **self.kw)
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/engine.py:97: in create_table
    self._log_and_exec(sql)
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/engine.py:92: in _log_and_exec
    self.adapter.execute(sql)
/usr/local/lib/python3.12/site-packages/pydal/adapters/__init__.py:67: in wrap
    return f(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <emmett.orm.engines.sqlite.SQLite object at 0xffff905b5a30>
args = ('CREATE TABLE "auth_groups"(\n    "id" INTEGER PRIMARY KEY AUTOINCREMENT,\n    "created_at" TIMESTAMP,\n    "updated_at" TIMESTAMP,\n    "role" CHAR(255) DEFAULT \'\' UNIQUE,\n    "description" TEXT\n);',)
kwargs = {}
command = 'CREATE TABLE "auth_groups"(\n    "id" INTEGER PRIMARY KEY AUTOINCREMENT,\n    "created_at" TIMESTAMP,\n    "updated_at" TIMESTAMP,\n    "role" CHAR(255) DEFAULT \'\' UNIQUE,\n    "description" TEXT\n);'
handlers = []

    @with_connection_or_raise
    def execute(self, *args, **kwargs):
        command = self.filter_sql_command(args[0])
        handlers = self._build_handlers_for_execution()
        for handler in handlers:
            handler.before_execute(command)
>       rv = self.cursor.execute(command, *args[1:], **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       sqlite3.OperationalError: table "auth_groups" already exists

/usr/local/lib/python3.12/site-packages/pydal/adapters/base.py:410: OperationalError
________ ERROR at setup of test_cache_integration_api_response_caching _________

request = <SubRequest '_prepare_db' for <Function test_empty_db>>

    @pytest.fixture(scope='module', autouse=True)
    def _prepare_db(request):
        # Setup test database - drop and recreate all tables
        with db.connection():
            # Get all table names from the database
            tables = db.tables
    
            # Drop all tables manually to ensure clean state
            for table in tables:
                try:
                    db.executesql(f'DROP TABLE IF EXISTS "{table}"')
                except:
                    pass
    
            # Commit the drops
            db.commit()
    
            # Now create fresh schema
            migration = generate_runtime_migration(db)
>           migration.up()

tests.py:51: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/utils.py:34: in up
    op.run()
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/operations.py:150: in run
    self.engine.create_table(self.table_name, self.columns, self.primary_keys, **self.kw)
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/engine.py:97: in create_table
    self._log_and_exec(sql)
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/engine.py:92: in _log_and_exec
    self.adapter.execute(sql)
/usr/local/lib/python3.12/site-packages/pydal/adapters/__init__.py:67: in wrap
    return f(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <emmett.orm.engines.sqlite.SQLite object at 0xffff905b5a30>
args = ('CREATE TABLE "auth_groups"(\n    "id" INTEGER PRIMARY KEY AUTOINCREMENT,\n    "created_at" TIMESTAMP,\n    "updated_at" TIMESTAMP,\n    "role" CHAR(255) DEFAULT \'\' UNIQUE,\n    "description" TEXT\n);',)
kwargs = {}
command = 'CREATE TABLE "auth_groups"(\n    "id" INTEGER PRIMARY KEY AUTOINCREMENT,\n    "created_at" TIMESTAMP,\n    "updated_at" TIMESTAMP,\n    "role" CHAR(255) DEFAULT \'\' UNIQUE,\n    "description" TEXT\n);'
handlers = []

    @with_connection_or_raise
    def execute(self, *args, **kwargs):
        command = self.filter_sql_command(args[0])
        handlers = self._build_handlers_for_execution()
        for handler in handlers:
            handler.before_execute(command)
>       rv = self.cursor.execute(command, *args[1:], **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       sqlite3.OperationalError: table "auth_groups" already exists

/usr/local/lib/python3.12/site-packages/pydal/adapters/base.py:410: OperationalError
_______ ERROR at setup of test_cache_integration_multi_key_invalidation ________

request = <SubRequest '_prepare_db' for <Function test_empty_db>>

    @pytest.fixture(scope='module', autouse=True)
    def _prepare_db(request):
        # Setup test database - drop and recreate all tables
        with db.connection():
            # Get all table names from the database
            tables = db.tables
    
            # Drop all tables manually to ensure clean state
            for table in tables:
                try:
                    db.executesql(f'DROP TABLE IF EXISTS "{table}"')
                except:
                    pass
    
            # Commit the drops
            db.commit()
    
            # Now create fresh schema
            migration = generate_runtime_migration(db)
>           migration.up()

tests.py:51: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/utils.py:34: in up
    op.run()
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/operations.py:150: in run
    self.engine.create_table(self.table_name, self.columns, self.primary_keys, **self.kw)
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/engine.py:97: in create_table
    self._log_and_exec(sql)
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/engine.py:92: in _log_and_exec
    self.adapter.execute(sql)
/usr/local/lib/python3.12/site-packages/pydal/adapters/__init__.py:67: in wrap
    return f(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <emmett.orm.engines.sqlite.SQLite object at 0xffff905b5a30>
args = ('CREATE TABLE "auth_groups"(\n    "id" INTEGER PRIMARY KEY AUTOINCREMENT,\n    "created_at" TIMESTAMP,\n    "updated_at" TIMESTAMP,\n    "role" CHAR(255) DEFAULT \'\' UNIQUE,\n    "description" TEXT\n);',)
kwargs = {}
command = 'CREATE TABLE "auth_groups"(\n    "id" INTEGER PRIMARY KEY AUTOINCREMENT,\n    "created_at" TIMESTAMP,\n    "updated_at" TIMESTAMP,\n    "role" CHAR(255) DEFAULT \'\' UNIQUE,\n    "description" TEXT\n);'
handlers = []

    @with_connection_or_raise
    def execute(self, *args, **kwargs):
        command = self.filter_sql_command(args[0])
        handlers = self._build_handlers_for_execution()
        for handler in handlers:
            handler.before_execute(command)
>       rv = self.cursor.execute(command, *args[1:], **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       sqlite3.OperationalError: table "auth_groups" already exists

/usr/local/lib/python3.12/site-packages/pydal/adapters/base.py:410: OperationalError
_________ ERROR at setup of test_cache_integration_concurrent_requests _________

request = <SubRequest '_prepare_db' for <Function test_empty_db>>

    @pytest.fixture(scope='module', autouse=True)
    def _prepare_db(request):
        # Setup test database - drop and recreate all tables
        with db.connection():
            # Get all table names from the database
            tables = db.tables
    
            # Drop all tables manually to ensure clean state
            for table in tables:
                try:
                    db.executesql(f'DROP TABLE IF EXISTS "{table}"')
                except:
                    pass
    
            # Commit the drops
            db.commit()
    
            # Now create fresh schema
            migration = generate_runtime_migration(db)
>           migration.up()

tests.py:51: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/utils.py:34: in up
    op.run()
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/operations.py:150: in run
    self.engine.create_table(self.table_name, self.columns, self.primary_keys, **self.kw)
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/engine.py:97: in create_table
    self._log_and_exec(sql)
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/engine.py:92: in _log_and_exec
    self.adapter.execute(sql)
/usr/local/lib/python3.12/site-packages/pydal/adapters/__init__.py:67: in wrap
    return f(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <emmett.orm.engines.sqlite.SQLite object at 0xffff905b5a30>
args = ('CREATE TABLE "auth_groups"(\n    "id" INTEGER PRIMARY KEY AUTOINCREMENT,\n    "created_at" TIMESTAMP,\n    "updated_at" TIMESTAMP,\n    "role" CHAR(255) DEFAULT \'\' UNIQUE,\n    "description" TEXT\n);',)
kwargs = {}
command = 'CREATE TABLE "auth_groups"(\n    "id" INTEGER PRIMARY KEY AUTOINCREMENT,\n    "created_at" TIMESTAMP,\n    "updated_at" TIMESTAMP,\n    "role" CHAR(255) DEFAULT \'\' UNIQUE,\n    "description" TEXT\n);'
handlers = []

    @with_connection_or_raise
    def execute(self, *args, **kwargs):
        command = self.filter_sql_command(args[0])
        handlers = self._build_handlers_for_execution()
        for handler in handlers:
            handler.before_execute(command)
>       rv = self.cursor.execute(command, *args[1:], **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       sqlite3.OperationalError: table "auth_groups" already exists

/usr/local/lib/python3.12/site-packages/pydal/adapters/base.py:410: OperationalError
____________ ERROR at setup of test_cache_integration_cache_warming ____________

request = <SubRequest '_prepare_db' for <Function test_empty_db>>

    @pytest.fixture(scope='module', autouse=True)
    def _prepare_db(request):
        # Setup test database - drop and recreate all tables
        with db.connection():
            # Get all table names from the database
            tables = db.tables
    
            # Drop all tables manually to ensure clean state
            for table in tables:
                try:
                    db.executesql(f'DROP TABLE IF EXISTS "{table}"')
                except:
                    pass
    
            # Commit the drops
            db.commit()
    
            # Now create fresh schema
            migration = generate_runtime_migration(db)
>           migration.up()

tests.py:51: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/utils.py:34: in up
    op.run()
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/operations.py:150: in run
    self.engine.create_table(self.table_name, self.columns, self.primary_keys, **self.kw)
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/engine.py:97: in create_table
    self._log_and_exec(sql)
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/engine.py:92: in _log_and_exec
    self.adapter.execute(sql)
/usr/local/lib/python3.12/site-packages/pydal/adapters/__init__.py:67: in wrap
    return f(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <emmett.orm.engines.sqlite.SQLite object at 0xffff905b5a30>
args = ('CREATE TABLE "auth_groups"(\n    "id" INTEGER PRIMARY KEY AUTOINCREMENT,\n    "created_at" TIMESTAMP,\n    "updated_at" TIMESTAMP,\n    "role" CHAR(255) DEFAULT \'\' UNIQUE,\n    "description" TEXT\n);',)
kwargs = {}
command = 'CREATE TABLE "auth_groups"(\n    "id" INTEGER PRIMARY KEY AUTOINCREMENT,\n    "created_at" TIMESTAMP,\n    "updated_at" TIMESTAMP,\n    "role" CHAR(255) DEFAULT \'\' UNIQUE,\n    "description" TEXT\n);'
handlers = []

    @with_connection_or_raise
    def execute(self, *args, **kwargs):
        command = self.filter_sql_command(args[0])
        handlers = self._build_handlers_for_execution()
        for handler in handlers:
            handler.before_execute(command)
>       rv = self.cursor.execute(command, *args[1:], **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       sqlite3.OperationalError: table "auth_groups" already exists

/usr/local/lib/python3.12/site-packages/pydal/adapters/base.py:410: OperationalError
__________ ERROR at setup of test_prometheus_metrics_endpoint_exists ___________

request = <SubRequest '_prepare_db' for <Function test_empty_db>>

    @pytest.fixture(scope='module', autouse=True)
    def _prepare_db(request):
        # Setup test database - drop and recreate all tables
        with db.connection():
            # Get all table names from the database
            tables = db.tables
    
            # Drop all tables manually to ensure clean state
            for table in tables:
                try:
                    db.executesql(f'DROP TABLE IF EXISTS "{table}"')
                except:
                    pass
    
            # Commit the drops
            db.commit()
    
            # Now create fresh schema
            migration = generate_runtime_migration(db)
>           migration.up()

tests.py:51: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/utils.py:34: in up
    op.run()
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/operations.py:150: in run
    self.engine.create_table(self.table_name, self.columns, self.primary_keys, **self.kw)
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/engine.py:97: in create_table
    self._log_and_exec(sql)
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/engine.py:92: in _log_and_exec
    self.adapter.execute(sql)
/usr/local/lib/python3.12/site-packages/pydal/adapters/__init__.py:67: in wrap
    return f(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <emmett.orm.engines.sqlite.SQLite object at 0xffff905b5a30>
args = ('CREATE TABLE "auth_groups"(\n    "id" INTEGER PRIMARY KEY AUTOINCREMENT,\n    "created_at" TIMESTAMP,\n    "updated_at" TIMESTAMP,\n    "role" CHAR(255) DEFAULT \'\' UNIQUE,\n    "description" TEXT\n);',)
kwargs = {}
command = 'CREATE TABLE "auth_groups"(\n    "id" INTEGER PRIMARY KEY AUTOINCREMENT,\n    "created_at" TIMESTAMP,\n    "updated_at" TIMESTAMP,\n    "role" CHAR(255) DEFAULT \'\' UNIQUE,\n    "description" TEXT\n);'
handlers = []

    @with_connection_or_raise
    def execute(self, *args, **kwargs):
        command = self.filter_sql_command(args[0])
        handlers = self._build_handlers_for_execution()
        for handler in handlers:
            handler.before_execute(command)
>       rv = self.cursor.execute(command, *args[1:], **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       sqlite3.OperationalError: table "auth_groups" already exists

/usr/local/lib/python3.12/site-packages/pydal/adapters/base.py:410: OperationalError
___________ ERROR at setup of test_prometheus_custom_metrics_defined ___________

request = <SubRequest '_prepare_db' for <Function test_empty_db>>

    @pytest.fixture(scope='module', autouse=True)
    def _prepare_db(request):
        # Setup test database - drop and recreate all tables
        with db.connection():
            # Get all table names from the database
            tables = db.tables
    
            # Drop all tables manually to ensure clean state
            for table in tables:
                try:
                    db.executesql(f'DROP TABLE IF EXISTS "{table}"')
                except:
                    pass
    
            # Commit the drops
            db.commit()
    
            # Now create fresh schema
            migration = generate_runtime_migration(db)
>           migration.up()

tests.py:51: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/utils.py:34: in up
    op.run()
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/operations.py:150: in run
    self.engine.create_table(self.table_name, self.columns, self.primary_keys, **self.kw)
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/engine.py:97: in create_table
    self._log_and_exec(sql)
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/engine.py:92: in _log_and_exec
    self.adapter.execute(sql)
/usr/local/lib/python3.12/site-packages/pydal/adapters/__init__.py:67: in wrap
    return f(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <emmett.orm.engines.sqlite.SQLite object at 0xffff905b5a30>
args = ('CREATE TABLE "auth_groups"(\n    "id" INTEGER PRIMARY KEY AUTOINCREMENT,\n    "created_at" TIMESTAMP,\n    "updated_at" TIMESTAMP,\n    "role" CHAR(255) DEFAULT \'\' UNIQUE,\n    "description" TEXT\n);',)
kwargs = {}
command = 'CREATE TABLE "auth_groups"(\n    "id" INTEGER PRIMARY KEY AUTOINCREMENT,\n    "created_at" TIMESTAMP,\n    "updated_at" TIMESTAMP,\n    "role" CHAR(255) DEFAULT \'\' UNIQUE,\n    "description" TEXT\n);'
handlers = []

    @with_connection_or_raise
    def execute(self, *args, **kwargs):
        command = self.filter_sql_command(args[0])
        handlers = self._build_handlers_for_execution()
        for handler in handlers:
            handler.before_execute(command)
>       rv = self.cursor.execute(command, *args[1:], **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       sqlite3.OperationalError: table "auth_groups" already exists

/usr/local/lib/python3.12/site-packages/pydal/adapters/base.py:410: OperationalError
_________ ERROR at setup of test_prometheus_decorator_tracks_requests __________

request = <SubRequest '_prepare_db' for <Function test_empty_db>>

    @pytest.fixture(scope='module', autouse=True)
    def _prepare_db(request):
        # Setup test database - drop and recreate all tables
        with db.connection():
            # Get all table names from the database
            tables = db.tables
    
            # Drop all tables manually to ensure clean state
            for table in tables:
                try:
                    db.executesql(f'DROP TABLE IF EXISTS "{table}"')
                except:
                    pass
    
            # Commit the drops
            db.commit()
    
            # Now create fresh schema
            migration = generate_runtime_migration(db)
>           migration.up()

tests.py:51: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/utils.py:34: in up
    op.run()
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/operations.py:150: in run
    self.engine.create_table(self.table_name, self.columns, self.primary_keys, **self.kw)
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/engine.py:97: in create_table
    self._log_and_exec(sql)
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/engine.py:92: in _log_and_exec
    self.adapter.execute(sql)
/usr/local/lib/python3.12/site-packages/pydal/adapters/__init__.py:67: in wrap
    return f(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <emmett.orm.engines.sqlite.SQLite object at 0xffff905b5a30>
args = ('CREATE TABLE "auth_groups"(\n    "id" INTEGER PRIMARY KEY AUTOINCREMENT,\n    "created_at" TIMESTAMP,\n    "updated_at" TIMESTAMP,\n    "role" CHAR(255) DEFAULT \'\' UNIQUE,\n    "description" TEXT\n);',)
kwargs = {}
command = 'CREATE TABLE "auth_groups"(\n    "id" INTEGER PRIMARY KEY AUTOINCREMENT,\n    "created_at" TIMESTAMP,\n    "updated_at" TIMESTAMP,\n    "role" CHAR(255) DEFAULT \'\' UNIQUE,\n    "description" TEXT\n);'
handlers = []

    @with_connection_or_raise
    def execute(self, *args, **kwargs):
        command = self.filter_sql_command(args[0])
        handlers = self._build_handlers_for_execution()
        for handler in handlers:
            handler.before_execute(command)
>       rv = self.cursor.execute(command, *args[1:], **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       sqlite3.OperationalError: table "auth_groups" already exists

/usr/local/lib/python3.12/site-packages/pydal/adapters/base.py:410: OperationalError
__________ ERROR at setup of test_prometheus_tracks_multiple_requests __________

request = <SubRequest '_prepare_db' for <Function test_empty_db>>

    @pytest.fixture(scope='module', autouse=True)
    def _prepare_db(request):
        # Setup test database - drop and recreate all tables
        with db.connection():
            # Get all table names from the database
            tables = db.tables
    
            # Drop all tables manually to ensure clean state
            for table in tables:
                try:
                    db.executesql(f'DROP TABLE IF EXISTS "{table}"')
                except:
                    pass
    
            # Commit the drops
            db.commit()
    
            # Now create fresh schema
            migration = generate_runtime_migration(db)
>           migration.up()

tests.py:51: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/utils.py:34: in up
    op.run()
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/operations.py:150: in run
    self.engine.create_table(self.table_name, self.columns, self.primary_keys, **self.kw)
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/engine.py:97: in create_table
    self._log_and_exec(sql)
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/engine.py:92: in _log_and_exec
    self.adapter.execute(sql)
/usr/local/lib/python3.12/site-packages/pydal/adapters/__init__.py:67: in wrap
    return f(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <emmett.orm.engines.sqlite.SQLite object at 0xffff905b5a30>
args = ('CREATE TABLE "auth_groups"(\n    "id" INTEGER PRIMARY KEY AUTOINCREMENT,\n    "created_at" TIMESTAMP,\n    "updated_at" TIMESTAMP,\n    "role" CHAR(255) DEFAULT \'\' UNIQUE,\n    "description" TEXT\n);',)
kwargs = {}
command = 'CREATE TABLE "auth_groups"(\n    "id" INTEGER PRIMARY KEY AUTOINCREMENT,\n    "created_at" TIMESTAMP,\n    "updated_at" TIMESTAMP,\n    "role" CHAR(255) DEFAULT \'\' UNIQUE,\n    "description" TEXT\n);'
handlers = []

    @with_connection_or_raise
    def execute(self, *args, **kwargs):
        command = self.filter_sql_command(args[0])
        handlers = self._build_handlers_for_execution()
        for handler in handlers:
            handler.before_execute(command)
>       rv = self.cursor.execute(command, *args[1:], **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       sqlite3.OperationalError: table "auth_groups" already exists

/usr/local/lib/python3.12/site-packages/pydal/adapters/base.py:410: OperationalError
_____________ ERROR at setup of test_prometheus_duration_histogram _____________

request = <SubRequest '_prepare_db' for <Function test_empty_db>>

    @pytest.fixture(scope='module', autouse=True)
    def _prepare_db(request):
        # Setup test database - drop and recreate all tables
        with db.connection():
            # Get all table names from the database
            tables = db.tables
    
            # Drop all tables manually to ensure clean state
            for table in tables:
                try:
                    db.executesql(f'DROP TABLE IF EXISTS "{table}"')
                except:
                    pass
    
            # Commit the drops
            db.commit()
    
            # Now create fresh schema
            migration = generate_runtime_migration(db)
>           migration.up()

tests.py:51: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/utils.py:34: in up
    op.run()
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/operations.py:150: in run
    self.engine.create_table(self.table_name, self.columns, self.primary_keys, **self.kw)
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/engine.py:97: in create_table
    self._log_and_exec(sql)
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/engine.py:92: in _log_and_exec
    self.adapter.execute(sql)
/usr/local/lib/python3.12/site-packages/pydal/adapters/__init__.py:67: in wrap
    return f(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <emmett.orm.engines.sqlite.SQLite object at 0xffff905b5a30>
args = ('CREATE TABLE "auth_groups"(\n    "id" INTEGER PRIMARY KEY AUTOINCREMENT,\n    "created_at" TIMESTAMP,\n    "updated_at" TIMESTAMP,\n    "role" CHAR(255) DEFAULT \'\' UNIQUE,\n    "description" TEXT\n);',)
kwargs = {}
command = 'CREATE TABLE "auth_groups"(\n    "id" INTEGER PRIMARY KEY AUTOINCREMENT,\n    "created_at" TIMESTAMP,\n    "updated_at" TIMESTAMP,\n    "role" CHAR(255) DEFAULT \'\' UNIQUE,\n    "description" TEXT\n);'
handlers = []

    @with_connection_or_raise
    def execute(self, *args, **kwargs):
        command = self.filter_sql_command(args[0])
        handlers = self._build_handlers_for_execution()
        for handler in handlers:
            handler.before_execute(command)
>       rv = self.cursor.execute(command, *args[1:], **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       sqlite3.OperationalError: table "auth_groups" already exists

/usr/local/lib/python3.12/site-packages/pydal/adapters/base.py:410: OperationalError
_________ ERROR at setup of test_prometheus_tracks_different_endpoints _________

request = <SubRequest '_prepare_db' for <Function test_empty_db>>

    @pytest.fixture(scope='module', autouse=True)
    def _prepare_db(request):
        # Setup test database - drop and recreate all tables
        with db.connection():
            # Get all table names from the database
            tables = db.tables
    
            # Drop all tables manually to ensure clean state
            for table in tables:
                try:
                    db.executesql(f'DROP TABLE IF EXISTS "{table}"')
                except:
                    pass
    
            # Commit the drops
            db.commit()
    
            # Now create fresh schema
            migration = generate_runtime_migration(db)
>           migration.up()

tests.py:51: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/utils.py:34: in up
    op.run()
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/operations.py:150: in run
    self.engine.create_table(self.table_name, self.columns, self.primary_keys, **self.kw)
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/engine.py:97: in create_table
    self._log_and_exec(sql)
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/engine.py:92: in _log_and_exec
    self.adapter.execute(sql)
/usr/local/lib/python3.12/site-packages/pydal/adapters/__init__.py:67: in wrap
    return f(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <emmett.orm.engines.sqlite.SQLite object at 0xffff905b5a30>
args = ('CREATE TABLE "auth_groups"(\n    "id" INTEGER PRIMARY KEY AUTOINCREMENT,\n    "created_at" TIMESTAMP,\n    "updated_at" TIMESTAMP,\n    "role" CHAR(255) DEFAULT \'\' UNIQUE,\n    "description" TEXT\n);',)
kwargs = {}
command = 'CREATE TABLE "auth_groups"(\n    "id" INTEGER PRIMARY KEY AUTOINCREMENT,\n    "created_at" TIMESTAMP,\n    "updated_at" TIMESTAMP,\n    "role" CHAR(255) DEFAULT \'\' UNIQUE,\n    "description" TEXT\n);'
handlers = []

    @with_connection_or_raise
    def execute(self, *args, **kwargs):
        command = self.filter_sql_command(args[0])
        handlers = self._build_handlers_for_execution()
        for handler in handlers:
            handler.before_execute(command)
>       rv = self.cursor.execute(command, *args[1:], **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       sqlite3.OperationalError: table "auth_groups" already exists

/usr/local/lib/python3.12/site-packages/pydal/adapters/base.py:410: OperationalError
_______________ ERROR at setup of test_prometheus_metrics_labels _______________

request = <SubRequest '_prepare_db' for <Function test_empty_db>>

    @pytest.fixture(scope='module', autouse=True)
    def _prepare_db(request):
        # Setup test database - drop and recreate all tables
        with db.connection():
            # Get all table names from the database
            tables = db.tables
    
            # Drop all tables manually to ensure clean state
            for table in tables:
                try:
                    db.executesql(f'DROP TABLE IF EXISTS "{table}"')
                except:
                    pass
    
            # Commit the drops
            db.commit()
    
            # Now create fresh schema
            migration = generate_runtime_migration(db)
>           migration.up()

tests.py:51: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/utils.py:34: in up
    op.run()
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/operations.py:150: in run
    self.engine.create_table(self.table_name, self.columns, self.primary_keys, **self.kw)
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/engine.py:97: in create_table
    self._log_and_exec(sql)
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/engine.py:92: in _log_and_exec
    self.adapter.execute(sql)
/usr/local/lib/python3.12/site-packages/pydal/adapters/__init__.py:67: in wrap
    return f(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <emmett.orm.engines.sqlite.SQLite object at 0xffff905b5a30>
args = ('CREATE TABLE "auth_groups"(\n    "id" INTEGER PRIMARY KEY AUTOINCREMENT,\n    "created_at" TIMESTAMP,\n    "updated_at" TIMESTAMP,\n    "role" CHAR(255) DEFAULT \'\' UNIQUE,\n    "description" TEXT\n);',)
kwargs = {}
command = 'CREATE TABLE "auth_groups"(\n    "id" INTEGER PRIMARY KEY AUTOINCREMENT,\n    "created_at" TIMESTAMP,\n    "updated_at" TIMESTAMP,\n    "role" CHAR(255) DEFAULT \'\' UNIQUE,\n    "description" TEXT\n);'
handlers = []

    @with_connection_or_raise
    def execute(self, *args, **kwargs):
        command = self.filter_sql_command(args[0])
        handlers = self._build_handlers_for_execution()
        for handler in handlers:
            handler.before_execute(command)
>       rv = self.cursor.execute(command, *args[1:], **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       sqlite3.OperationalError: table "auth_groups" already exists

/usr/local/lib/python3.12/site-packages/pydal/adapters/base.py:410: OperationalError
___________ ERROR at setup of test_prometheus_decorator_availability ___________

request = <SubRequest '_prepare_db' for <Function test_empty_db>>

    @pytest.fixture(scope='module', autouse=True)
    def _prepare_db(request):
        # Setup test database - drop and recreate all tables
        with db.connection():
            # Get all table names from the database
            tables = db.tables
    
            # Drop all tables manually to ensure clean state
            for table in tables:
                try:
                    db.executesql(f'DROP TABLE IF EXISTS "{table}"')
                except:
                    pass
    
            # Commit the drops
            db.commit()
    
            # Now create fresh schema
            migration = generate_runtime_migration(db)
>           migration.up()

tests.py:51: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/utils.py:34: in up
    op.run()
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/operations.py:150: in run
    self.engine.create_table(self.table_name, self.columns, self.primary_keys, **self.kw)
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/engine.py:97: in create_table
    self._log_and_exec(sql)
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/engine.py:92: in _log_and_exec
    self.adapter.execute(sql)
/usr/local/lib/python3.12/site-packages/pydal/adapters/__init__.py:67: in wrap
    return f(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <emmett.orm.engines.sqlite.SQLite object at 0xffff905b5a30>
args = ('CREATE TABLE "auth_groups"(\n    "id" INTEGER PRIMARY KEY AUTOINCREMENT,\n    "created_at" TIMESTAMP,\n    "updated_at" TIMESTAMP,\n    "role" CHAR(255) DEFAULT \'\' UNIQUE,\n    "description" TEXT\n);',)
kwargs = {}
command = 'CREATE TABLE "auth_groups"(\n    "id" INTEGER PRIMARY KEY AUTOINCREMENT,\n    "created_at" TIMESTAMP,\n    "updated_at" TIMESTAMP,\n    "role" CHAR(255) DEFAULT \'\' UNIQUE,\n    "description" TEXT\n);'
handlers = []

    @with_connection_or_raise
    def execute(self, *args, **kwargs):
        command = self.filter_sql_command(args[0])
        handlers = self._build_handlers_for_execution()
        for handler in handlers:
            handler.before_execute(command)
>       rv = self.cursor.execute(command, *args[1:], **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       sqlite3.OperationalError: table "auth_groups" already exists

/usr/local/lib/python3.12/site-packages/pydal/adapters/base.py:410: OperationalError
____ ERROR at setup of test_prometheus_metrics_persistence_across_requests _____

request = <SubRequest '_prepare_db' for <Function test_empty_db>>

    @pytest.fixture(scope='module', autouse=True)
    def _prepare_db(request):
        # Setup test database - drop and recreate all tables
        with db.connection():
            # Get all table names from the database
            tables = db.tables
    
            # Drop all tables manually to ensure clean state
            for table in tables:
                try:
                    db.executesql(f'DROP TABLE IF EXISTS "{table}"')
                except:
                    pass
    
            # Commit the drops
            db.commit()
    
            # Now create fresh schema
            migration = generate_runtime_migration(db)
>           migration.up()

tests.py:51: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/utils.py:34: in up
    op.run()
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/operations.py:150: in run
    self.engine.create_table(self.table_name, self.columns, self.primary_keys, **self.kw)
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/engine.py:97: in create_table
    self._log_and_exec(sql)
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/engine.py:92: in _log_and_exec
    self.adapter.execute(sql)
/usr/local/lib/python3.12/site-packages/pydal/adapters/__init__.py:67: in wrap
    return f(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <emmett.orm.engines.sqlite.SQLite object at 0xffff905b5a30>
args = ('CREATE TABLE "auth_groups"(\n    "id" INTEGER PRIMARY KEY AUTOINCREMENT,\n    "created_at" TIMESTAMP,\n    "updated_at" TIMESTAMP,\n    "role" CHAR(255) DEFAULT \'\' UNIQUE,\n    "description" TEXT\n);',)
kwargs = {}
command = 'CREATE TABLE "auth_groups"(\n    "id" INTEGER PRIMARY KEY AUTOINCREMENT,\n    "created_at" TIMESTAMP,\n    "updated_at" TIMESTAMP,\n    "role" CHAR(255) DEFAULT \'\' UNIQUE,\n    "description" TEXT\n);'
handlers = []

    @with_connection_or_raise
    def execute(self, *args, **kwargs):
        command = self.filter_sql_command(args[0])
        handlers = self._build_handlers_for_execution()
        for handler in handlers:
            handler.before_execute(command)
>       rv = self.cursor.execute(command, *args[1:], **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       sqlite3.OperationalError: table "auth_groups" already exists

/usr/local/lib/python3.12/site-packages/pydal/adapters/base.py:410: OperationalError
________ ERROR at setup of test_prometheus_environment_variable_support ________

request = <SubRequest '_prepare_db' for <Function test_empty_db>>

    @pytest.fixture(scope='module', autouse=True)
    def _prepare_db(request):
        # Setup test database - drop and recreate all tables
        with db.connection():
            # Get all table names from the database
            tables = db.tables
    
            # Drop all tables manually to ensure clean state
            for table in tables:
                try:
                    db.executesql(f'DROP TABLE IF EXISTS "{table}"')
                except:
                    pass
    
            # Commit the drops
            db.commit()
    
            # Now create fresh schema
            migration = generate_runtime_migration(db)
>           migration.up()

tests.py:51: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/utils.py:34: in up
    op.run()
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/operations.py:150: in run
    self.engine.create_table(self.table_name, self.columns, self.primary_keys, **self.kw)
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/engine.py:97: in create_table
    self._log_and_exec(sql)
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/engine.py:92: in _log_and_exec
    self.adapter.execute(sql)
/usr/local/lib/python3.12/site-packages/pydal/adapters/__init__.py:67: in wrap
    return f(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <emmett.orm.engines.sqlite.SQLite object at 0xffff905b5a30>
args = ('CREATE TABLE "auth_groups"(\n    "id" INTEGER PRIMARY KEY AUTOINCREMENT,\n    "created_at" TIMESTAMP,\n    "updated_at" TIMESTAMP,\n    "role" CHAR(255) DEFAULT \'\' UNIQUE,\n    "description" TEXT\n);',)
kwargs = {}
command = 'CREATE TABLE "auth_groups"(\n    "id" INTEGER PRIMARY KEY AUTOINCREMENT,\n    "created_at" TIMESTAMP,\n    "updated_at" TIMESTAMP,\n    "role" CHAR(255) DEFAULT \'\' UNIQUE,\n    "description" TEXT\n);'
handlers = []

    @with_connection_or_raise
    def execute(self, *args, **kwargs):
        command = self.filter_sql_command(args[0])
        handlers = self._build_handlers_for_execution()
        for handler in handlers:
            handler.before_execute(command)
>       rv = self.cursor.execute(command, *args[1:], **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       sqlite3.OperationalError: table "auth_groups" already exists

/usr/local/lib/python3.12/site-packages/pydal/adapters/base.py:410: OperationalError
_________________ ERROR at setup of test_homepage_shows_posts __________________

request = <SubRequest '_prepare_db' for <Function test_empty_db>>

    @pytest.fixture(scope='module', autouse=True)
    def _prepare_db(request):
        # Setup test database - drop and recreate all tables
        with db.connection():
            # Get all table names from the database
            tables = db.tables
    
            # Drop all tables manually to ensure clean state
            for table in tables:
                try:
                    db.executesql(f'DROP TABLE IF EXISTS "{table}"')
                except:
                    pass
    
            # Commit the drops
            db.commit()
    
            # Now create fresh schema
            migration = generate_runtime_migration(db)
>           migration.up()

tests.py:51: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/utils.py:34: in up
    op.run()
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/operations.py:150: in run
    self.engine.create_table(self.table_name, self.columns, self.primary_keys, **self.kw)
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/engine.py:97: in create_table
    self._log_and_exec(sql)
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/engine.py:92: in _log_and_exec
    self.adapter.execute(sql)
/usr/local/lib/python3.12/site-packages/pydal/adapters/__init__.py:67: in wrap
    return f(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <emmett.orm.engines.sqlite.SQLite object at 0xffff905b5a30>
args = ('CREATE TABLE "auth_groups"(\n    "id" INTEGER PRIMARY KEY AUTOINCREMENT,\n    "created_at" TIMESTAMP,\n    "updated_at" TIMESTAMP,\n    "role" CHAR(255) DEFAULT \'\' UNIQUE,\n    "description" TEXT\n);',)
kwargs = {}
command = 'CREATE TABLE "auth_groups"(\n    "id" INTEGER PRIMARY KEY AUTOINCREMENT,\n    "created_at" TIMESTAMP,\n    "updated_at" TIMESTAMP,\n    "role" CHAR(255) DEFAULT \'\' UNIQUE,\n    "description" TEXT\n);'
handlers = []

    @with_connection_or_raise
    def execute(self, *args, **kwargs):
        command = self.filter_sql_command(args[0])
        handlers = self._build_handlers_for_execution()
        for handler in handlers:
            handler.before_execute(command)
>       rv = self.cursor.execute(command, *args[1:], **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       sqlite3.OperationalError: table "auth_groups" already exists

/usr/local/lib/python3.12/site-packages/pydal/adapters/base.py:410: OperationalError
___________________ ERROR at setup of test_view_single_post ____________________

request = <SubRequest '_prepare_db' for <Function test_empty_db>>

    @pytest.fixture(scope='module', autouse=True)
    def _prepare_db(request):
        # Setup test database - drop and recreate all tables
        with db.connection():
            # Get all table names from the database
            tables = db.tables
    
            # Drop all tables manually to ensure clean state
            for table in tables:
                try:
                    db.executesql(f'DROP TABLE IF EXISTS "{table}"')
                except:
                    pass
    
            # Commit the drops
            db.commit()
    
            # Now create fresh schema
            migration = generate_runtime_migration(db)
>           migration.up()

tests.py:51: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/utils.py:34: in up
    op.run()
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/operations.py:150: in run
    self.engine.create_table(self.table_name, self.columns, self.primary_keys, **self.kw)
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/engine.py:97: in create_table
    self._log_and_exec(sql)
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/engine.py:92: in _log_and_exec
    self.adapter.execute(sql)
/usr/local/lib/python3.12/site-packages/pydal/adapters/__init__.py:67: in wrap
    return f(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <emmett.orm.engines.sqlite.SQLite object at 0xffff905b5a30>
args = ('CREATE TABLE "auth_groups"(\n    "id" INTEGER PRIMARY KEY AUTOINCREMENT,\n    "created_at" TIMESTAMP,\n    "updated_at" TIMESTAMP,\n    "role" CHAR(255) DEFAULT \'\' UNIQUE,\n    "description" TEXT\n);',)
kwargs = {}
command = 'CREATE TABLE "auth_groups"(\n    "id" INTEGER PRIMARY KEY AUTOINCREMENT,\n    "created_at" TIMESTAMP,\n    "updated_at" TIMESTAMP,\n    "role" CHAR(255) DEFAULT \'\' UNIQUE,\n    "description" TEXT\n);'
handlers = []

    @with_connection_or_raise
    def execute(self, *args, **kwargs):
        command = self.filter_sql_command(args[0])
        handlers = self._build_handlers_for_execution()
        for handler in handlers:
            handler.before_execute(command)
>       rv = self.cursor.execute(command, *args[1:], **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       sqlite3.OperationalError: table "auth_groups" already exists

/usr/local/lib/python3.12/site-packages/pydal/adapters/base.py:410: OperationalError
____________ ERROR at setup of test_view_single_post_with_comments _____________

request = <SubRequest '_prepare_db' for <Function test_empty_db>>

    @pytest.fixture(scope='module', autouse=True)
    def _prepare_db(request):
        # Setup test database - drop and recreate all tables
        with db.connection():
            # Get all table names from the database
            tables = db.tables
    
            # Drop all tables manually to ensure clean state
            for table in tables:
                try:
                    db.executesql(f'DROP TABLE IF EXISTS "{table}"')
                except:
                    pass
    
            # Commit the drops
            db.commit()
    
            # Now create fresh schema
            migration = generate_runtime_migration(db)
>           migration.up()

tests.py:51: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/utils.py:34: in up
    op.run()
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/operations.py:150: in run
    self.engine.create_table(self.table_name, self.columns, self.primary_keys, **self.kw)
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/engine.py:97: in create_table
    self._log_and_exec(sql)
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/engine.py:92: in _log_and_exec
    self.adapter.execute(sql)
/usr/local/lib/python3.12/site-packages/pydal/adapters/__init__.py:67: in wrap
    return f(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <emmett.orm.engines.sqlite.SQLite object at 0xffff905b5a30>
args = ('CREATE TABLE "auth_groups"(\n    "id" INTEGER PRIMARY KEY AUTOINCREMENT,\n    "created_at" TIMESTAMP,\n    "updated_at" TIMESTAMP,\n    "role" CHAR(255) DEFAULT \'\' UNIQUE,\n    "description" TEXT\n);',)
kwargs = {}
command = 'CREATE TABLE "auth_groups"(\n    "id" INTEGER PRIMARY KEY AUTOINCREMENT,\n    "created_at" TIMESTAMP,\n    "updated_at" TIMESTAMP,\n    "role" CHAR(255) DEFAULT \'\' UNIQUE,\n    "description" TEXT\n);'
handlers = []

    @with_connection_or_raise
    def execute(self, *args, **kwargs):
        command = self.filter_sql_command(args[0])
        handlers = self._build_handlers_for_execution()
        for handler in handlers:
            handler.before_execute(command)
>       rv = self.cursor.execute(command, *args[1:], **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       sqlite3.OperationalError: table "auth_groups" already exists

/usr/local/lib/python3.12/site-packages/pydal/adapters/base.py:410: OperationalError
_________________ ERROR at setup of test_view_nonexistent_post _________________

request = <SubRequest '_prepare_db' for <Function test_empty_db>>

    @pytest.fixture(scope='module', autouse=True)
    def _prepare_db(request):
        # Setup test database - drop and recreate all tables
        with db.connection():
            # Get all table names from the database
            tables = db.tables
    
            # Drop all tables manually to ensure clean state
            for table in tables:
                try:
                    db.executesql(f'DROP TABLE IF EXISTS "{table}"')
                except:
                    pass
    
            # Commit the drops
            db.commit()
    
            # Now create fresh schema
            migration = generate_runtime_migration(db)
>           migration.up()

tests.py:51: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/utils.py:34: in up
    op.run()
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/operations.py:150: in run
    self.engine.create_table(self.table_name, self.columns, self.primary_keys, **self.kw)
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/engine.py:97: in create_table
    self._log_and_exec(sql)
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/engine.py:92: in _log_and_exec
    self.adapter.execute(sql)
/usr/local/lib/python3.12/site-packages/pydal/adapters/__init__.py:67: in wrap
    return f(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <emmett.orm.engines.sqlite.SQLite object at 0xffff905b5a30>
args = ('CREATE TABLE "auth_groups"(\n    "id" INTEGER PRIMARY KEY AUTOINCREMENT,\n    "created_at" TIMESTAMP,\n    "updated_at" TIMESTAMP,\n    "role" CHAR(255) DEFAULT \'\' UNIQUE,\n    "description" TEXT\n);',)
kwargs = {}
command = 'CREATE TABLE "auth_groups"(\n    "id" INTEGER PRIMARY KEY AUTOINCREMENT,\n    "created_at" TIMESTAMP,\n    "updated_at" TIMESTAMP,\n    "role" CHAR(255) DEFAULT \'\' UNIQUE,\n    "description" TEXT\n);'
handlers = []

    @with_connection_or_raise
    def execute(self, *args, **kwargs):
        command = self.filter_sql_command(args[0])
        handlers = self._build_handlers_for_execution()
        for handler in handlers:
            handler.before_execute(command)
>       rv = self.cursor.execute(command, *args[1:], **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       sqlite3.OperationalError: table "auth_groups" already exists

/usr/local/lib/python3.12/site-packages/pydal/adapters/base.py:410: OperationalError
________________ ERROR at setup of test_new_post_page_as_admin _________________

request = <SubRequest '_prepare_db' for <Function test_empty_db>>

    @pytest.fixture(scope='module', autouse=True)
    def _prepare_db(request):
        # Setup test database - drop and recreate all tables
        with db.connection():
            # Get all table names from the database
            tables = db.tables
    
            # Drop all tables manually to ensure clean state
            for table in tables:
                try:
                    db.executesql(f'DROP TABLE IF EXISTS "{table}"')
                except:
                    pass
    
            # Commit the drops
            db.commit()
    
            # Now create fresh schema
            migration = generate_runtime_migration(db)
>           migration.up()

tests.py:51: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/utils.py:34: in up
    op.run()
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/operations.py:150: in run
    self.engine.create_table(self.table_name, self.columns, self.primary_keys, **self.kw)
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/engine.py:97: in create_table
    self._log_and_exec(sql)
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/engine.py:92: in _log_and_exec
    self.adapter.execute(sql)
/usr/local/lib/python3.12/site-packages/pydal/adapters/__init__.py:67: in wrap
    return f(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <emmett.orm.engines.sqlite.SQLite object at 0xffff905b5a30>
args = ('CREATE TABLE "auth_groups"(\n    "id" INTEGER PRIMARY KEY AUTOINCREMENT,\n    "created_at" TIMESTAMP,\n    "updated_at" TIMESTAMP,\n    "role" CHAR(255) DEFAULT \'\' UNIQUE,\n    "description" TEXT\n);',)
kwargs = {}
command = 'CREATE TABLE "auth_groups"(\n    "id" INTEGER PRIMARY KEY AUTOINCREMENT,\n    "created_at" TIMESTAMP,\n    "updated_at" TIMESTAMP,\n    "role" CHAR(255) DEFAULT \'\' UNIQUE,\n    "description" TEXT\n);'
handlers = []

    @with_connection_or_raise
    def execute(self, *args, **kwargs):
        command = self.filter_sql_command(args[0])
        handlers = self._build_handlers_for_execution()
        for handler in handlers:
            handler.before_execute(command)
>       rv = self.cursor.execute(command, *args[1:], **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       sqlite3.OperationalError: table "auth_groups" already exists

/usr/local/lib/python3.12/site-packages/pydal/adapters/base.py:410: OperationalError
_________________ ERROR at setup of test_create_post_via_form __________________

request = <SubRequest '_prepare_db' for <Function test_empty_db>>

    @pytest.fixture(scope='module', autouse=True)
    def _prepare_db(request):
        # Setup test database - drop and recreate all tables
        with db.connection():
            # Get all table names from the database
            tables = db.tables
    
            # Drop all tables manually to ensure clean state
            for table in tables:
                try:
                    db.executesql(f'DROP TABLE IF EXISTS "{table}"')
                except:
                    pass
    
            # Commit the drops
            db.commit()
    
            # Now create fresh schema
            migration = generate_runtime_migration(db)
>           migration.up()

tests.py:51: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/utils.py:34: in up
    op.run()
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/operations.py:150: in run
    self.engine.create_table(self.table_name, self.columns, self.primary_keys, **self.kw)
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/engine.py:97: in create_table
    self._log_and_exec(sql)
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/engine.py:92: in _log_and_exec
    self.adapter.execute(sql)
/usr/local/lib/python3.12/site-packages/pydal/adapters/__init__.py:67: in wrap
    return f(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <emmett.orm.engines.sqlite.SQLite object at 0xffff905b5a30>
args = ('CREATE TABLE "auth_groups"(\n    "id" INTEGER PRIMARY KEY AUTOINCREMENT,\n    "created_at" TIMESTAMP,\n    "updated_at" TIMESTAMP,\n    "role" CHAR(255) DEFAULT \'\' UNIQUE,\n    "description" TEXT\n);',)
kwargs = {}
command = 'CREATE TABLE "auth_groups"(\n    "id" INTEGER PRIMARY KEY AUTOINCREMENT,\n    "created_at" TIMESTAMP,\n    "updated_at" TIMESTAMP,\n    "role" CHAR(255) DEFAULT \'\' UNIQUE,\n    "description" TEXT\n);'
handlers = []

    @with_connection_or_raise
    def execute(self, *args, **kwargs):
        command = self.filter_sql_command(args[0])
        handlers = self._build_handlers_for_execution()
        for handler in handlers:
            handler.before_execute(command)
>       rv = self.cursor.execute(command, *args[1:], **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       sqlite3.OperationalError: table "auth_groups" already exists

/usr/local/lib/python3.12/site-packages/pydal/adapters/base.py:410: OperationalError
_______________ ERROR at setup of test_create_post_missing_title _______________

request = <SubRequest '_prepare_db' for <Function test_empty_db>>

    @pytest.fixture(scope='module', autouse=True)
    def _prepare_db(request):
        # Setup test database - drop and recreate all tables
        with db.connection():
            # Get all table names from the database
            tables = db.tables
    
            # Drop all tables manually to ensure clean state
            for table in tables:
                try:
                    db.executesql(f'DROP TABLE IF EXISTS "{table}"')
                except:
                    pass
    
            # Commit the drops
            db.commit()
    
            # Now create fresh schema
            migration = generate_runtime_migration(db)
>           migration.up()

tests.py:51: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/utils.py:34: in up
    op.run()
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/operations.py:150: in run
    self.engine.create_table(self.table_name, self.columns, self.primary_keys, **self.kw)
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/engine.py:97: in create_table
    self._log_and_exec(sql)
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/engine.py:92: in _log_and_exec
    self.adapter.execute(sql)
/usr/local/lib/python3.12/site-packages/pydal/adapters/__init__.py:67: in wrap
    return f(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <emmett.orm.engines.sqlite.SQLite object at 0xffff905b5a30>
args = ('CREATE TABLE "auth_groups"(\n    "id" INTEGER PRIMARY KEY AUTOINCREMENT,\n    "created_at" TIMESTAMP,\n    "updated_at" TIMESTAMP,\n    "role" CHAR(255) DEFAULT \'\' UNIQUE,\n    "description" TEXT\n);',)
kwargs = {}
command = 'CREATE TABLE "auth_groups"(\n    "id" INTEGER PRIMARY KEY AUTOINCREMENT,\n    "created_at" TIMESTAMP,\n    "updated_at" TIMESTAMP,\n    "role" CHAR(255) DEFAULT \'\' UNIQUE,\n    "description" TEXT\n);'
handlers = []

    @with_connection_or_raise
    def execute(self, *args, **kwargs):
        command = self.filter_sql_command(args[0])
        handlers = self._build_handlers_for_execution()
        for handler in handlers:
            handler.before_execute(command)
>       rv = self.cursor.execute(command, *args[1:], **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       sqlite3.OperationalError: table "auth_groups" already exists

/usr/local/lib/python3.12/site-packages/pydal/adapters/base.py:410: OperationalError
_______________ ERROR at setup of test_create_post_missing_text ________________

request = <SubRequest '_prepare_db' for <Function test_empty_db>>

    @pytest.fixture(scope='module', autouse=True)
    def _prepare_db(request):
        # Setup test database - drop and recreate all tables
        with db.connection():
            # Get all table names from the database
            tables = db.tables
    
            # Drop all tables manually to ensure clean state
            for table in tables:
                try:
                    db.executesql(f'DROP TABLE IF EXISTS "{table}"')
                except:
                    pass
    
            # Commit the drops
            db.commit()
    
            # Now create fresh schema
            migration = generate_runtime_migration(db)
>           migration.up()

tests.py:51: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/utils.py:34: in up
    op.run()
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/operations.py:150: in run
    self.engine.create_table(self.table_name, self.columns, self.primary_keys, **self.kw)
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/engine.py:97: in create_table
    self._log_and_exec(sql)
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/engine.py:92: in _log_and_exec
    self.adapter.execute(sql)
/usr/local/lib/python3.12/site-packages/pydal/adapters/__init__.py:67: in wrap
    return f(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <emmett.orm.engines.sqlite.SQLite object at 0xffff905b5a30>
args = ('CREATE TABLE "auth_groups"(\n    "id" INTEGER PRIMARY KEY AUTOINCREMENT,\n    "created_at" TIMESTAMP,\n    "updated_at" TIMESTAMP,\n    "role" CHAR(255) DEFAULT \'\' UNIQUE,\n    "description" TEXT\n);',)
kwargs = {}
command = 'CREATE TABLE "auth_groups"(\n    "id" INTEGER PRIMARY KEY AUTOINCREMENT,\n    "created_at" TIMESTAMP,\n    "updated_at" TIMESTAMP,\n    "role" CHAR(255) DEFAULT \'\' UNIQUE,\n    "description" TEXT\n);'
handlers = []

    @with_connection_or_raise
    def execute(self, *args, **kwargs):
        command = self.filter_sql_command(args[0])
        handlers = self._build_handlers_for_execution()
        for handler in handlers:
            handler.before_execute(command)
>       rv = self.cursor.execute(command, *args[1:], **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       sqlite3.OperationalError: table "auth_groups" already exists

/usr/local/lib/python3.12/site-packages/pydal/adapters/base.py:410: OperationalError
_______ ERROR at setup of test_comment_form_shown_to_authenticated_user ________

request = <SubRequest '_prepare_db' for <Function test_empty_db>>

    @pytest.fixture(scope='module', autouse=True)
    def _prepare_db(request):
        # Setup test database - drop and recreate all tables
        with db.connection():
            # Get all table names from the database
            tables = db.tables
    
            # Drop all tables manually to ensure clean state
            for table in tables:
                try:
                    db.executesql(f'DROP TABLE IF EXISTS "{table}"')
                except:
                    pass
    
            # Commit the drops
            db.commit()
    
            # Now create fresh schema
            migration = generate_runtime_migration(db)
>           migration.up()

tests.py:51: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/utils.py:34: in up
    op.run()
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/operations.py:150: in run
    self.engine.create_table(self.table_name, self.columns, self.primary_keys, **self.kw)
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/engine.py:97: in create_table
    self._log_and_exec(sql)
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/engine.py:92: in _log_and_exec
    self.adapter.execute(sql)
/usr/local/lib/python3.12/site-packages/pydal/adapters/__init__.py:67: in wrap
    return f(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <emmett.orm.engines.sqlite.SQLite object at 0xffff905b5a30>
args = ('CREATE TABLE "auth_groups"(\n    "id" INTEGER PRIMARY KEY AUTOINCREMENT,\n    "created_at" TIMESTAMP,\n    "updated_at" TIMESTAMP,\n    "role" CHAR(255) DEFAULT \'\' UNIQUE,\n    "description" TEXT\n);',)
kwargs = {}
command = 'CREATE TABLE "auth_groups"(\n    "id" INTEGER PRIMARY KEY AUTOINCREMENT,\n    "created_at" TIMESTAMP,\n    "updated_at" TIMESTAMP,\n    "role" CHAR(255) DEFAULT \'\' UNIQUE,\n    "description" TEXT\n);'
handlers = []

    @with_connection_or_raise
    def execute(self, *args, **kwargs):
        command = self.filter_sql_command(args[0])
        handlers = self._build_handlers_for_execution()
        for handler in handlers:
            handler.before_execute(command)
>       rv = self.cursor.execute(command, *args[1:], **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       sqlite3.OperationalError: table "auth_groups" already exists

/usr/local/lib/python3.12/site-packages/pydal/adapters/base.py:410: OperationalError
_______ ERROR at setup of test_comment_form_hidden_from_unauthenticated ________

request = <SubRequest '_prepare_db' for <Function test_empty_db>>

    @pytest.fixture(scope='module', autouse=True)
    def _prepare_db(request):
        # Setup test database - drop and recreate all tables
        with db.connection():
            # Get all table names from the database
            tables = db.tables
    
            # Drop all tables manually to ensure clean state
            for table in tables:
                try:
                    db.executesql(f'DROP TABLE IF EXISTS "{table}"')
                except:
                    pass
    
            # Commit the drops
            db.commit()
    
            # Now create fresh schema
            migration = generate_runtime_migration(db)
>           migration.up()

tests.py:51: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/utils.py:34: in up
    op.run()
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/operations.py:150: in run
    self.engine.create_table(self.table_name, self.columns, self.primary_keys, **self.kw)
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/engine.py:97: in create_table
    self._log_and_exec(sql)
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/engine.py:92: in _log_and_exec
    self.adapter.execute(sql)
/usr/local/lib/python3.12/site-packages/pydal/adapters/__init__.py:67: in wrap
    return f(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <emmett.orm.engines.sqlite.SQLite object at 0xffff905b5a30>
args = ('CREATE TABLE "auth_groups"(\n    "id" INTEGER PRIMARY KEY AUTOINCREMENT,\n    "created_at" TIMESTAMP,\n    "updated_at" TIMESTAMP,\n    "role" CHAR(255) DEFAULT \'\' UNIQUE,\n    "description" TEXT\n);',)
kwargs = {}
command = 'CREATE TABLE "auth_groups"(\n    "id" INTEGER PRIMARY KEY AUTOINCREMENT,\n    "created_at" TIMESTAMP,\n    "updated_at" TIMESTAMP,\n    "role" CHAR(255) DEFAULT \'\' UNIQUE,\n    "description" TEXT\n);'
handlers = []

    @with_connection_or_raise
    def execute(self, *args, **kwargs):
        command = self.filter_sql_command(args[0])
        handlers = self._build_handlers_for_execution()
        for handler in handlers:
            handler.before_execute(command)
>       rv = self.cursor.execute(command, *args[1:], **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       sqlite3.OperationalError: table "auth_groups" already exists

/usr/local/lib/python3.12/site-packages/pydal/adapters/base.py:410: OperationalError
________________ ERROR at setup of test_create_comment_via_form ________________

request = <SubRequest '_prepare_db' for <Function test_empty_db>>

    @pytest.fixture(scope='module', autouse=True)
    def _prepare_db(request):
        # Setup test database - drop and recreate all tables
        with db.connection():
            # Get all table names from the database
            tables = db.tables
    
            # Drop all tables manually to ensure clean state
            for table in tables:
                try:
                    db.executesql(f'DROP TABLE IF EXISTS "{table}"')
                except:
                    pass
    
            # Commit the drops
            db.commit()
    
            # Now create fresh schema
            migration = generate_runtime_migration(db)
>           migration.up()

tests.py:51: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/utils.py:34: in up
    op.run()
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/operations.py:150: in run
    self.engine.create_table(self.table_name, self.columns, self.primary_keys, **self.kw)
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/engine.py:97: in create_table
    self._log_and_exec(sql)
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/engine.py:92: in _log_and_exec
    self.adapter.execute(sql)
/usr/local/lib/python3.12/site-packages/pydal/adapters/__init__.py:67: in wrap
    return f(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <emmett.orm.engines.sqlite.SQLite object at 0xffff905b5a30>
args = ('CREATE TABLE "auth_groups"(\n    "id" INTEGER PRIMARY KEY AUTOINCREMENT,\n    "created_at" TIMESTAMP,\n    "updated_at" TIMESTAMP,\n    "role" CHAR(255) DEFAULT \'\' UNIQUE,\n    "description" TEXT\n);',)
kwargs = {}
command = 'CREATE TABLE "auth_groups"(\n    "id" INTEGER PRIMARY KEY AUTOINCREMENT,\n    "created_at" TIMESTAMP,\n    "updated_at" TIMESTAMP,\n    "role" CHAR(255) DEFAULT \'\' UNIQUE,\n    "description" TEXT\n);'
handlers = []

    @with_connection_or_raise
    def execute(self, *args, **kwargs):
        command = self.filter_sql_command(args[0])
        handlers = self._build_handlers_for_execution()
        for handler in handlers:
            handler.before_execute(command)
>       rv = self.cursor.execute(command, *args[1:], **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       sqlite3.OperationalError: table "auth_groups" already exists

/usr/local/lib/python3.12/site-packages/pydal/adapters/base.py:410: OperationalError
____________ ERROR at setup of test_comments_reverse_chronological _____________

request = <SubRequest '_prepare_db' for <Function test_empty_db>>

    @pytest.fixture(scope='module', autouse=True)
    def _prepare_db(request):
        # Setup test database - drop and recreate all tables
        with db.connection():
            # Get all table names from the database
            tables = db.tables
    
            # Drop all tables manually to ensure clean state
            for table in tables:
                try:
                    db.executesql(f'DROP TABLE IF EXISTS "{table}"')
                except:
                    pass
    
            # Commit the drops
            db.commit()
    
            # Now create fresh schema
            migration = generate_runtime_migration(db)
>           migration.up()

tests.py:51: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/utils.py:34: in up
    op.run()
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/operations.py:150: in run
    self.engine.create_table(self.table_name, self.columns, self.primary_keys, **self.kw)
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/engine.py:97: in create_table
    self._log_and_exec(sql)
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/engine.py:92: in _log_and_exec
    self.adapter.execute(sql)
/usr/local/lib/python3.12/site-packages/pydal/adapters/__init__.py:67: in wrap
    return f(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <emmett.orm.engines.sqlite.SQLite object at 0xffff905b5a30>
args = ('CREATE TABLE "auth_groups"(\n    "id" INTEGER PRIMARY KEY AUTOINCREMENT,\n    "created_at" TIMESTAMP,\n    "updated_at" TIMESTAMP,\n    "role" CHAR(255) DEFAULT \'\' UNIQUE,\n    "description" TEXT\n);',)
kwargs = {}
command = 'CREATE TABLE "auth_groups"(\n    "id" INTEGER PRIMARY KEY AUTOINCREMENT,\n    "created_at" TIMESTAMP,\n    "updated_at" TIMESTAMP,\n    "role" CHAR(255) DEFAULT \'\' UNIQUE,\n    "description" TEXT\n);'
handlers = []

    @with_connection_or_raise
    def execute(self, *args, **kwargs):
        command = self.filter_sql_command(args[0])
        handlers = self._build_handlers_for_execution()
        for handler in handlers:
            handler.before_execute(command)
>       rv = self.cursor.execute(command, *args[1:], **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       sqlite3.OperationalError: table "auth_groups" already exists

/usr/local/lib/python3.12/site-packages/pydal/adapters/base.py:410: OperationalError
__________ ERROR at setup of test_regular_user_cannot_access_new_post __________

request = <SubRequest '_prepare_db' for <Function test_empty_db>>

    @pytest.fixture(scope='module', autouse=True)
    def _prepare_db(request):
        # Setup test database - drop and recreate all tables
        with db.connection():
            # Get all table names from the database
            tables = db.tables
    
            # Drop all tables manually to ensure clean state
            for table in tables:
                try:
                    db.executesql(f'DROP TABLE IF EXISTS "{table}"')
                except:
                    pass
    
            # Commit the drops
            db.commit()
    
            # Now create fresh schema
            migration = generate_runtime_migration(db)
>           migration.up()

tests.py:51: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/utils.py:34: in up
    op.run()
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/operations.py:150: in run
    self.engine.create_table(self.table_name, self.columns, self.primary_keys, **self.kw)
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/engine.py:97: in create_table
    self._log_and_exec(sql)
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/engine.py:92: in _log_and_exec
    self.adapter.execute(sql)
/usr/local/lib/python3.12/site-packages/pydal/adapters/__init__.py:67: in wrap
    return f(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <emmett.orm.engines.sqlite.SQLite object at 0xffff905b5a30>
args = ('CREATE TABLE "auth_groups"(\n    "id" INTEGER PRIMARY KEY AUTOINCREMENT,\n    "created_at" TIMESTAMP,\n    "updated_at" TIMESTAMP,\n    "role" CHAR(255) DEFAULT \'\' UNIQUE,\n    "description" TEXT\n);',)
kwargs = {}
command = 'CREATE TABLE "auth_groups"(\n    "id" INTEGER PRIMARY KEY AUTOINCREMENT,\n    "created_at" TIMESTAMP,\n    "updated_at" TIMESTAMP,\n    "role" CHAR(255) DEFAULT \'\' UNIQUE,\n    "description" TEXT\n);'
handlers = []

    @with_connection_or_raise
    def execute(self, *args, **kwargs):
        command = self.filter_sql_command(args[0])
        handlers = self._build_handlers_for_execution()
        for handler in handlers:
            handler.before_execute(command)
>       rv = self.cursor.execute(command, *args[1:], **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       sqlite3.OperationalError: table "auth_groups" already exists

/usr/local/lib/python3.12/site-packages/pydal/adapters/base.py:410: OperationalError
________________ ERROR at setup of test_admin_group_membership _________________

request = <SubRequest '_prepare_db' for <Function test_empty_db>>

    @pytest.fixture(scope='module', autouse=True)
    def _prepare_db(request):
        # Setup test database - drop and recreate all tables
        with db.connection():
            # Get all table names from the database
            tables = db.tables
    
            # Drop all tables manually to ensure clean state
            for table in tables:
                try:
                    db.executesql(f'DROP TABLE IF EXISTS "{table}"')
                except:
                    pass
    
            # Commit the drops
            db.commit()
    
            # Now create fresh schema
            migration = generate_runtime_migration(db)
>           migration.up()

tests.py:51: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/utils.py:34: in up
    op.run()
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/operations.py:150: in run
    self.engine.create_table(self.table_name, self.columns, self.primary_keys, **self.kw)
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/engine.py:97: in create_table
    self._log_and_exec(sql)
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/engine.py:92: in _log_and_exec
    self.adapter.execute(sql)
/usr/local/lib/python3.12/site-packages/pydal/adapters/__init__.py:67: in wrap
    return f(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <emmett.orm.engines.sqlite.SQLite object at 0xffff905b5a30>
args = ('CREATE TABLE "auth_groups"(\n    "id" INTEGER PRIMARY KEY AUTOINCREMENT,\n    "created_at" TIMESTAMP,\n    "updated_at" TIMESTAMP,\n    "role" CHAR(255) DEFAULT \'\' UNIQUE,\n    "description" TEXT\n);',)
kwargs = {}
command = 'CREATE TABLE "auth_groups"(\n    "id" INTEGER PRIMARY KEY AUTOINCREMENT,\n    "created_at" TIMESTAMP,\n    "updated_at" TIMESTAMP,\n    "role" CHAR(255) DEFAULT \'\' UNIQUE,\n    "description" TEXT\n);'
handlers = []

    @with_connection_or_raise
    def execute(self, *args, **kwargs):
        command = self.filter_sql_command(args[0])
        handlers = self._build_handlers_for_execution()
        for handler in handlers:
            handler.before_execute(command)
>       rv = self.cursor.execute(command, *args[1:], **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       sqlite3.OperationalError: table "auth_groups" already exists

/usr/local/lib/python3.12/site-packages/pydal/adapters/base.py:410: OperationalError
__________________ ERROR at setup of test_user_has_many_posts __________________

request = <SubRequest '_prepare_db' for <Function test_empty_db>>

    @pytest.fixture(scope='module', autouse=True)
    def _prepare_db(request):
        # Setup test database - drop and recreate all tables
        with db.connection():
            # Get all table names from the database
            tables = db.tables
    
            # Drop all tables manually to ensure clean state
            for table in tables:
                try:
                    db.executesql(f'DROP TABLE IF EXISTS "{table}"')
                except:
                    pass
    
            # Commit the drops
            db.commit()
    
            # Now create fresh schema
            migration = generate_runtime_migration(db)
>           migration.up()

tests.py:51: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/utils.py:34: in up
    op.run()
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/operations.py:150: in run
    self.engine.create_table(self.table_name, self.columns, self.primary_keys, **self.kw)
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/engine.py:97: in create_table
    self._log_and_exec(sql)
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/engine.py:92: in _log_and_exec
    self.adapter.execute(sql)
/usr/local/lib/python3.12/site-packages/pydal/adapters/__init__.py:67: in wrap
    return f(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <emmett.orm.engines.sqlite.SQLite object at 0xffff905b5a30>
args = ('CREATE TABLE "auth_groups"(\n    "id" INTEGER PRIMARY KEY AUTOINCREMENT,\n    "created_at" TIMESTAMP,\n    "updated_at" TIMESTAMP,\n    "role" CHAR(255) DEFAULT \'\' UNIQUE,\n    "description" TEXT\n);',)
kwargs = {}
command = 'CREATE TABLE "auth_groups"(\n    "id" INTEGER PRIMARY KEY AUTOINCREMENT,\n    "created_at" TIMESTAMP,\n    "updated_at" TIMESTAMP,\n    "role" CHAR(255) DEFAULT \'\' UNIQUE,\n    "description" TEXT\n);'
handlers = []

    @with_connection_or_raise
    def execute(self, *args, **kwargs):
        command = self.filter_sql_command(args[0])
        handlers = self._build_handlers_for_execution()
        for handler in handlers:
            handler.before_execute(command)
>       rv = self.cursor.execute(command, *args[1:], **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       sqlite3.OperationalError: table "auth_groups" already exists

/usr/local/lib/python3.12/site-packages/pydal/adapters/base.py:410: OperationalError
_________________ ERROR at setup of test_post_belongs_to_user __________________

request = <SubRequest '_prepare_db' for <Function test_empty_db>>

    @pytest.fixture(scope='module', autouse=True)
    def _prepare_db(request):
        # Setup test database - drop and recreate all tables
        with db.connection():
            # Get all table names from the database
            tables = db.tables
    
            # Drop all tables manually to ensure clean state
            for table in tables:
                try:
                    db.executesql(f'DROP TABLE IF EXISTS "{table}"')
                except:
                    pass
    
            # Commit the drops
            db.commit()
    
            # Now create fresh schema
            migration = generate_runtime_migration(db)
>           migration.up()

tests.py:51: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/utils.py:34: in up
    op.run()
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/operations.py:150: in run
    self.engine.create_table(self.table_name, self.columns, self.primary_keys, **self.kw)
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/engine.py:97: in create_table
    self._log_and_exec(sql)
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/engine.py:92: in _log_and_exec
    self.adapter.execute(sql)
/usr/local/lib/python3.12/site-packages/pydal/adapters/__init__.py:67: in wrap
    return f(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <emmett.orm.engines.sqlite.SQLite object at 0xffff905b5a30>
args = ('CREATE TABLE "auth_groups"(\n    "id" INTEGER PRIMARY KEY AUTOINCREMENT,\n    "created_at" TIMESTAMP,\n    "updated_at" TIMESTAMP,\n    "role" CHAR(255) DEFAULT \'\' UNIQUE,\n    "description" TEXT\n);',)
kwargs = {}
command = 'CREATE TABLE "auth_groups"(\n    "id" INTEGER PRIMARY KEY AUTOINCREMENT,\n    "created_at" TIMESTAMP,\n    "updated_at" TIMESTAMP,\n    "role" CHAR(255) DEFAULT \'\' UNIQUE,\n    "description" TEXT\n);'
handlers = []

    @with_connection_or_raise
    def execute(self, *args, **kwargs):
        command = self.filter_sql_command(args[0])
        handlers = self._build_handlers_for_execution()
        for handler in handlers:
            handler.before_execute(command)
>       rv = self.cursor.execute(command, *args[1:], **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       sqlite3.OperationalError: table "auth_groups" already exists

/usr/local/lib/python3.12/site-packages/pydal/adapters/base.py:410: OperationalError
________________ ERROR at setup of test_post_has_many_comments _________________

request = <SubRequest '_prepare_db' for <Function test_empty_db>>

    @pytest.fixture(scope='module', autouse=True)
    def _prepare_db(request):
        # Setup test database - drop and recreate all tables
        with db.connection():
            # Get all table names from the database
            tables = db.tables
    
            # Drop all tables manually to ensure clean state
            for table in tables:
                try:
                    db.executesql(f'DROP TABLE IF EXISTS "{table}"')
                except:
                    pass
    
            # Commit the drops
            db.commit()
    
            # Now create fresh schema
            migration = generate_runtime_migration(db)
>           migration.up()

tests.py:51: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/utils.py:34: in up
    op.run()
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/operations.py:150: in run
    self.engine.create_table(self.table_name, self.columns, self.primary_keys, **self.kw)
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/engine.py:97: in create_table
    self._log_and_exec(sql)
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/engine.py:92: in _log_and_exec
    self.adapter.execute(sql)
/usr/local/lib/python3.12/site-packages/pydal/adapters/__init__.py:67: in wrap
    return f(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <emmett.orm.engines.sqlite.SQLite object at 0xffff905b5a30>
args = ('CREATE TABLE "auth_groups"(\n    "id" INTEGER PRIMARY KEY AUTOINCREMENT,\n    "created_at" TIMESTAMP,\n    "updated_at" TIMESTAMP,\n    "role" CHAR(255) DEFAULT \'\' UNIQUE,\n    "description" TEXT\n);',)
kwargs = {}
command = 'CREATE TABLE "auth_groups"(\n    "id" INTEGER PRIMARY KEY AUTOINCREMENT,\n    "created_at" TIMESTAMP,\n    "updated_at" TIMESTAMP,\n    "role" CHAR(255) DEFAULT \'\' UNIQUE,\n    "description" TEXT\n);'
handlers = []

    @with_connection_or_raise
    def execute(self, *args, **kwargs):
        command = self.filter_sql_command(args[0])
        handlers = self._build_handlers_for_execution()
        for handler in handlers:
            handler.before_execute(command)
>       rv = self.cursor.execute(command, *args[1:], **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       sqlite3.OperationalError: table "auth_groups" already exists

/usr/local/lib/python3.12/site-packages/pydal/adapters/base.py:410: OperationalError
________________ ERROR at setup of test_comment_belongs_to_post ________________

request = <SubRequest '_prepare_db' for <Function test_empty_db>>

    @pytest.fixture(scope='module', autouse=True)
    def _prepare_db(request):
        # Setup test database - drop and recreate all tables
        with db.connection():
            # Get all table names from the database
            tables = db.tables
    
            # Drop all tables manually to ensure clean state
            for table in tables:
                try:
                    db.executesql(f'DROP TABLE IF EXISTS "{table}"')
                except:
                    pass
    
            # Commit the drops
            db.commit()
    
            # Now create fresh schema
            migration = generate_runtime_migration(db)
>           migration.up()

tests.py:51: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/utils.py:34: in up
    op.run()
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/operations.py:150: in run
    self.engine.create_table(self.table_name, self.columns, self.primary_keys, **self.kw)
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/engine.py:97: in create_table
    self._log_and_exec(sql)
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/engine.py:92: in _log_and_exec
    self.adapter.execute(sql)
/usr/local/lib/python3.12/site-packages/pydal/adapters/__init__.py:67: in wrap
    return f(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <emmett.orm.engines.sqlite.SQLite object at 0xffff905b5a30>
args = ('CREATE TABLE "auth_groups"(\n    "id" INTEGER PRIMARY KEY AUTOINCREMENT,\n    "created_at" TIMESTAMP,\n    "updated_at" TIMESTAMP,\n    "role" CHAR(255) DEFAULT \'\' UNIQUE,\n    "description" TEXT\n);',)
kwargs = {}
command = 'CREATE TABLE "auth_groups"(\n    "id" INTEGER PRIMARY KEY AUTOINCREMENT,\n    "created_at" TIMESTAMP,\n    "updated_at" TIMESTAMP,\n    "role" CHAR(255) DEFAULT \'\' UNIQUE,\n    "description" TEXT\n);'
handlers = []

    @with_connection_or_raise
    def execute(self, *args, **kwargs):
        command = self.filter_sql_command(args[0])
        handlers = self._build_handlers_for_execution()
        for handler in handlers:
            handler.before_execute(command)
>       rv = self.cursor.execute(command, *args[1:], **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       sqlite3.OperationalError: table "auth_groups" already exists

/usr/local/lib/python3.12/site-packages/pydal/adapters/base.py:410: OperationalError
____________ ERROR at setup of test_error_endpoint_raises_exception ____________

request = <SubRequest '_prepare_db' for <Function test_empty_db>>

    @pytest.fixture(scope='module', autouse=True)
    def _prepare_db(request):
        # Setup test database - drop and recreate all tables
        with db.connection():
            # Get all table names from the database
            tables = db.tables
    
            # Drop all tables manually to ensure clean state
            for table in tables:
                try:
                    db.executesql(f'DROP TABLE IF EXISTS "{table}"')
                except:
                    pass
    
            # Commit the drops
            db.commit()
    
            # Now create fresh schema
            migration = generate_runtime_migration(db)
>           migration.up()

tests.py:51: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/utils.py:34: in up
    op.run()
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/operations.py:150: in run
    self.engine.create_table(self.table_name, self.columns, self.primary_keys, **self.kw)
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/engine.py:97: in create_table
    self._log_and_exec(sql)
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/engine.py:92: in _log_and_exec
    self.adapter.execute(sql)
/usr/local/lib/python3.12/site-packages/pydal/adapters/__init__.py:67: in wrap
    return f(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <emmett.orm.engines.sqlite.SQLite object at 0xffff905b5a30>
args = ('CREATE TABLE "auth_groups"(\n    "id" INTEGER PRIMARY KEY AUTOINCREMENT,\n    "created_at" TIMESTAMP,\n    "updated_at" TIMESTAMP,\n    "role" CHAR(255) DEFAULT \'\' UNIQUE,\n    "description" TEXT\n);',)
kwargs = {}
command = 'CREATE TABLE "auth_groups"(\n    "id" INTEGER PRIMARY KEY AUTOINCREMENT,\n    "created_at" TIMESTAMP,\n    "updated_at" TIMESTAMP,\n    "role" CHAR(255) DEFAULT \'\' UNIQUE,\n    "description" TEXT\n);'
handlers = []

    @with_connection_or_raise
    def execute(self, *args, **kwargs):
        command = self.filter_sql_command(args[0])
        handlers = self._build_handlers_for_execution()
        for handler in handlers:
            handler.before_execute(command)
>       rv = self.cursor.execute(command, *args[1:], **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       sqlite3.OperationalError: table "auth_groups" already exists

/usr/local/lib/python3.12/site-packages/pydal/adapters/base.py:410: OperationalError
________________ ERROR at setup of test_error_division_endpoint ________________

request = <SubRequest '_prepare_db' for <Function test_empty_db>>

    @pytest.fixture(scope='module', autouse=True)
    def _prepare_db(request):
        # Setup test database - drop and recreate all tables
        with db.connection():
            # Get all table names from the database
            tables = db.tables
    
            # Drop all tables manually to ensure clean state
            for table in tables:
                try:
                    db.executesql(f'DROP TABLE IF EXISTS "{table}"')
                except:
                    pass
    
            # Commit the drops
            db.commit()
    
            # Now create fresh schema
            migration = generate_runtime_migration(db)
>           migration.up()

tests.py:51: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/utils.py:34: in up
    op.run()
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/operations.py:150: in run
    self.engine.create_table(self.table_name, self.columns, self.primary_keys, **self.kw)
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/engine.py:97: in create_table
    self._log_and_exec(sql)
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/engine.py:92: in _log_and_exec
    self.adapter.execute(sql)
/usr/local/lib/python3.12/site-packages/pydal/adapters/__init__.py:67: in wrap
    return f(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <emmett.orm.engines.sqlite.SQLite object at 0xffff905b5a30>
args = ('CREATE TABLE "auth_groups"(\n    "id" INTEGER PRIMARY KEY AUTOINCREMENT,\n    "created_at" TIMESTAMP,\n    "updated_at" TIMESTAMP,\n    "role" CHAR(255) DEFAULT \'\' UNIQUE,\n    "description" TEXT\n);',)
kwargs = {}
command = 'CREATE TABLE "auth_groups"(\n    "id" INTEGER PRIMARY KEY AUTOINCREMENT,\n    "created_at" TIMESTAMP,\n    "updated_at" TIMESTAMP,\n    "role" CHAR(255) DEFAULT \'\' UNIQUE,\n    "description" TEXT\n);'
handlers = []

    @with_connection_or_raise
    def execute(self, *args, **kwargs):
        command = self.filter_sql_command(args[0])
        handlers = self._build_handlers_for_execution()
        for handler in handlers:
            handler.before_execute(command)
>       rv = self.cursor.execute(command, *args[1:], **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       sqlite3.OperationalError: table "auth_groups" already exists

/usr/local/lib/python3.12/site-packages/pydal/adapters/base.py:410: OperationalError
_________________ ERROR at setup of test_nonexistent_route_404 _________________

request = <SubRequest '_prepare_db' for <Function test_empty_db>>

    @pytest.fixture(scope='module', autouse=True)
    def _prepare_db(request):
        # Setup test database - drop and recreate all tables
        with db.connection():
            # Get all table names from the database
            tables = db.tables
    
            # Drop all tables manually to ensure clean state
            for table in tables:
                try:
                    db.executesql(f'DROP TABLE IF EXISTS "{table}"')
                except:
                    pass
    
            # Commit the drops
            db.commit()
    
            # Now create fresh schema
            migration = generate_runtime_migration(db)
>           migration.up()

tests.py:51: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/utils.py:34: in up
    op.run()
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/operations.py:150: in run
    self.engine.create_table(self.table_name, self.columns, self.primary_keys, **self.kw)
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/engine.py:97: in create_table
    self._log_and_exec(sql)
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/engine.py:92: in _log_and_exec
    self.adapter.execute(sql)
/usr/local/lib/python3.12/site-packages/pydal/adapters/__init__.py:67: in wrap
    return f(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <emmett.orm.engines.sqlite.SQLite object at 0xffff905b5a30>
args = ('CREATE TABLE "auth_groups"(\n    "id" INTEGER PRIMARY KEY AUTOINCREMENT,\n    "created_at" TIMESTAMP,\n    "updated_at" TIMESTAMP,\n    "role" CHAR(255) DEFAULT \'\' UNIQUE,\n    "description" TEXT\n);',)
kwargs = {}
command = 'CREATE TABLE "auth_groups"(\n    "id" INTEGER PRIMARY KEY AUTOINCREMENT,\n    "created_at" TIMESTAMP,\n    "updated_at" TIMESTAMP,\n    "role" CHAR(255) DEFAULT \'\' UNIQUE,\n    "description" TEXT\n);'
handlers = []

    @with_connection_or_raise
    def execute(self, *args, **kwargs):
        command = self.filter_sql_command(args[0])
        handlers = self._build_handlers_for_execution()
        for handler in handlers:
            handler.before_execute(command)
>       rv = self.cursor.execute(command, *args[1:], **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       sqlite3.OperationalError: table "auth_groups" already exists

/usr/local/lib/python3.12/site-packages/pydal/adapters/base.py:410: OperationalError
______________ ERROR at setup of test_special_characters_in_post _______________

request = <SubRequest '_prepare_db' for <Function test_empty_db>>

    @pytest.fixture(scope='module', autouse=True)
    def _prepare_db(request):
        # Setup test database - drop and recreate all tables
        with db.connection():
            # Get all table names from the database
            tables = db.tables
    
            # Drop all tables manually to ensure clean state
            for table in tables:
                try:
                    db.executesql(f'DROP TABLE IF EXISTS "{table}"')
                except:
                    pass
    
            # Commit the drops
            db.commit()
    
            # Now create fresh schema
            migration = generate_runtime_migration(db)
>           migration.up()

tests.py:51: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/utils.py:34: in up
    op.run()
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/operations.py:150: in run
    self.engine.create_table(self.table_name, self.columns, self.primary_keys, **self.kw)
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/engine.py:97: in create_table
    self._log_and_exec(sql)
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/engine.py:92: in _log_and_exec
    self.adapter.execute(sql)
/usr/local/lib/python3.12/site-packages/pydal/adapters/__init__.py:67: in wrap
    return f(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <emmett.orm.engines.sqlite.SQLite object at 0xffff905b5a30>
args = ('CREATE TABLE "auth_groups"(\n    "id" INTEGER PRIMARY KEY AUTOINCREMENT,\n    "created_at" TIMESTAMP,\n    "updated_at" TIMESTAMP,\n    "role" CHAR(255) DEFAULT \'\' UNIQUE,\n    "description" TEXT\n);',)
kwargs = {}
command = 'CREATE TABLE "auth_groups"(\n    "id" INTEGER PRIMARY KEY AUTOINCREMENT,\n    "created_at" TIMESTAMP,\n    "updated_at" TIMESTAMP,\n    "role" CHAR(255) DEFAULT \'\' UNIQUE,\n    "description" TEXT\n);'
handlers = []

    @with_connection_or_raise
    def execute(self, *args, **kwargs):
        command = self.filter_sql_command(args[0])
        handlers = self._build_handlers_for_execution()
        for handler in handlers:
            handler.before_execute(command)
>       rv = self.cursor.execute(command, *args[1:], **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       sqlite3.OperationalError: table "auth_groups" already exists

/usr/local/lib/python3.12/site-packages/pydal/adapters/base.py:410: OperationalError
___________ ERROR at setup of test_session_persists_across_requests ____________

request = <SubRequest '_prepare_db' for <Function test_empty_db>>

    @pytest.fixture(scope='module', autouse=True)
    def _prepare_db(request):
        # Setup test database - drop and recreate all tables
        with db.connection():
            # Get all table names from the database
            tables = db.tables
    
            # Drop all tables manually to ensure clean state
            for table in tables:
                try:
                    db.executesql(f'DROP TABLE IF EXISTS "{table}"')
                except:
                    pass
    
            # Commit the drops
            db.commit()
    
            # Now create fresh schema
            migration = generate_runtime_migration(db)
>           migration.up()

tests.py:51: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/utils.py:34: in up
    op.run()
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/operations.py:150: in run
    self.engine.create_table(self.table_name, self.columns, self.primary_keys, **self.kw)
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/engine.py:97: in create_table
    self._log_and_exec(sql)
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/engine.py:92: in _log_and_exec
    self.adapter.execute(sql)
/usr/local/lib/python3.12/site-packages/pydal/adapters/__init__.py:67: in wrap
    return f(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <emmett.orm.engines.sqlite.SQLite object at 0xffff905b5a30>
args = ('CREATE TABLE "auth_groups"(\n    "id" INTEGER PRIMARY KEY AUTOINCREMENT,\n    "created_at" TIMESTAMP,\n    "updated_at" TIMESTAMP,\n    "role" CHAR(255) DEFAULT \'\' UNIQUE,\n    "description" TEXT\n);',)
kwargs = {}
command = 'CREATE TABLE "auth_groups"(\n    "id" INTEGER PRIMARY KEY AUTOINCREMENT,\n    "created_at" TIMESTAMP,\n    "updated_at" TIMESTAMP,\n    "role" CHAR(255) DEFAULT \'\' UNIQUE,\n    "description" TEXT\n);'
handlers = []

    @with_connection_or_raise
    def execute(self, *args, **kwargs):
        command = self.filter_sql_command(args[0])
        handlers = self._build_handlers_for_execution()
        for handler in handlers:
            handler.before_execute(command)
>       rv = self.cursor.execute(command, *args[1:], **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       sqlite3.OperationalError: table "auth_groups" already exists

/usr/local/lib/python3.12/site-packages/pydal/adapters/base.py:410: OperationalError
______________ ERROR at setup of test_session_contains_user_data _______________

request = <SubRequest '_prepare_db' for <Function test_empty_db>>

    @pytest.fixture(scope='module', autouse=True)
    def _prepare_db(request):
        # Setup test database - drop and recreate all tables
        with db.connection():
            # Get all table names from the database
            tables = db.tables
    
            # Drop all tables manually to ensure clean state
            for table in tables:
                try:
                    db.executesql(f'DROP TABLE IF EXISTS "{table}"')
                except:
                    pass
    
            # Commit the drops
            db.commit()
    
            # Now create fresh schema
            migration = generate_runtime_migration(db)
>           migration.up()

tests.py:51: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/utils.py:34: in up
    op.run()
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/operations.py:150: in run
    self.engine.create_table(self.table_name, self.columns, self.primary_keys, **self.kw)
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/engine.py:97: in create_table
    self._log_and_exec(sql)
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/engine.py:92: in _log_and_exec
    self.adapter.execute(sql)
/usr/local/lib/python3.12/site-packages/pydal/adapters/__init__.py:67: in wrap
    return f(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <emmett.orm.engines.sqlite.SQLite object at 0xffff905b5a30>
args = ('CREATE TABLE "auth_groups"(\n    "id" INTEGER PRIMARY KEY AUTOINCREMENT,\n    "created_at" TIMESTAMP,\n    "updated_at" TIMESTAMP,\n    "role" CHAR(255) DEFAULT \'\' UNIQUE,\n    "description" TEXT\n);',)
kwargs = {}
command = 'CREATE TABLE "auth_groups"(\n    "id" INTEGER PRIMARY KEY AUTOINCREMENT,\n    "created_at" TIMESTAMP,\n    "updated_at" TIMESTAMP,\n    "role" CHAR(255) DEFAULT \'\' UNIQUE,\n    "description" TEXT\n);'
handlers = []

    @with_connection_or_raise
    def execute(self, *args, **kwargs):
        command = self.filter_sql_command(args[0])
        handlers = self._build_handlers_for_execution()
        for handler in handlers:
            handler.before_execute(command)
>       rv = self.cursor.execute(command, *args[1:], **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       sqlite3.OperationalError: table "auth_groups" already exists

/usr/local/lib/python3.12/site-packages/pydal/adapters/base.py:410: OperationalError
_________________ ERROR at setup of test_csrf_token_in_session _________________

request = <SubRequest '_prepare_db' for <Function test_empty_db>>

    @pytest.fixture(scope='module', autouse=True)
    def _prepare_db(request):
        # Setup test database - drop and recreate all tables
        with db.connection():
            # Get all table names from the database
            tables = db.tables
    
            # Drop all tables manually to ensure clean state
            for table in tables:
                try:
                    db.executesql(f'DROP TABLE IF EXISTS "{table}"')
                except:
                    pass
    
            # Commit the drops
            db.commit()
    
            # Now create fresh schema
            migration = generate_runtime_migration(db)
>           migration.up()

tests.py:51: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/utils.py:34: in up
    op.run()
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/operations.py:150: in run
    self.engine.create_table(self.table_name, self.columns, self.primary_keys, **self.kw)
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/engine.py:97: in create_table
    self._log_and_exec(sql)
/usr/local/lib/python3.12/site-packages/emmett/orm/migrations/engine.py:92: in _log_and_exec
    self.adapter.execute(sql)
/usr/local/lib/python3.12/site-packages/pydal/adapters/__init__.py:67: in wrap
    return f(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <emmett.orm.engines.sqlite.SQLite object at 0xffff905b5a30>
args = ('CREATE TABLE "auth_groups"(\n    "id" INTEGER PRIMARY KEY AUTOINCREMENT,\n    "created_at" TIMESTAMP,\n    "updated_at" TIMESTAMP,\n    "role" CHAR(255) DEFAULT \'\' UNIQUE,\n    "description" TEXT\n);',)
kwargs = {}
command = 'CREATE TABLE "auth_groups"(\n    "id" INTEGER PRIMARY KEY AUTOINCREMENT,\n    "created_at" TIMESTAMP,\n    "updated_at" TIMESTAMP,\n    "role" CHAR(255) DEFAULT \'\' UNIQUE,\n    "description" TEXT\n);'
handlers = []

    @with_connection_or_raise
    def execute(self, *args, **kwargs):
        command = self.filter_sql_command(args[0])
        handlers = self._build_handlers_for_execution()
        for handler in handlers:
            handler.before_execute(command)
>       rv = self.cursor.execute(command, *args[1:], **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       sqlite3.OperationalError: table "auth_groups" already exists

/usr/local/lib/python3.12/site-packages/pydal/adapters/base.py:410: OperationalError
=========================== short test summary info ============================
ERROR tests.py::test_empty_db - sqlite3.OperationalError: table "auth_groups"...
ERROR tests.py::test_login - sqlite3.OperationalError: table "auth_groups" al...
ERROR tests.py::test_no_admin_access - sqlite3.OperationalError: table "auth_...
ERROR tests.py::test_admin_access - sqlite3.OperationalError: table "auth_gro...
ERROR tests.py::test_api_posts_list - sqlite3.OperationalError: table "auth_g...
ERROR tests.py::test_api_posts_get_single - sqlite3.OperationalError: table "...
ERROR tests.py::test_api_posts_get_invalid_id - sqlite3.OperationalError: tab...
ERROR tests.py::test_api_posts_create_authenticated - sqlite3.OperationalErro...
ERROR tests.py::test_api_posts_create_missing_title - sqlite3.OperationalErro...
ERROR tests.py::test_api_posts_create_missing_text - sqlite3.OperationalError...
ERROR tests.py::test_api_posts_update - sqlite3.OperationalError: table "auth...
ERROR tests.py::test_api_posts_delete - sqlite3.OperationalError: table "auth...
ERROR tests.py::test_api_posts_user_auto_set - sqlite3.OperationalError: tabl...
ERROR tests.py::test_api_comments_list - sqlite3.OperationalError: table "aut...
ERROR tests.py::test_api_comments_create - sqlite3.OperationalError: table "a...
ERROR tests.py::test_api_comments_create_missing_text - sqlite3.OperationalEr...
ERROR tests.py::test_api_comments_create_invalid_post - sqlite3.OperationalEr...
ERROR tests.py::test_api_comments_user_auto_set - sqlite3.OperationalError: t...
ERROR tests.py::test_api_users_list - sqlite3.OperationalError: table "auth_g...
ERROR tests.py::test_api_users_get_single - sqlite3.OperationalError: table "...
ERROR tests.py::test_api_users_create_disabled - sqlite3.OperationalError: ta...
ERROR tests.py::test_api_users_update_disabled - sqlite3.OperationalError: ta...
ERROR tests.py::test_api_users_delete_disabled - sqlite3.OperationalError: ta...
ERROR tests.py::test_openapi_spec_exists - sqlite3.OperationalError: table "a...
ERROR tests.py::test_openapi_spec_structure - sqlite3.OperationalError: table...
ERROR tests.py::test_openapi_spec_endpoints - sqlite3.OperationalError: table...
ERROR tests.py::test_swagger_ui_page - sqlite3.OperationalError: table "auth_...
ERROR tests.py::test_api_root - sqlite3.OperationalError: table "auth_groups"...
ERROR tests.py::test_login_page_renders - sqlite3.OperationalError: table "au...
ERROR tests.py::test_login_correct_credentials - sqlite3.OperationalError: ta...
ERROR tests.py::test_login_incorrect_password - sqlite3.OperationalError: tab...
ERROR tests.py::test_login_nonexistent_email - sqlite3.OperationalError: tabl...
ERROR tests.py::test_logout - sqlite3.OperationalError: table "auth_groups" a...
ERROR tests.py::test_valkey_basic_set_get - sqlite3.OperationalError: table "...
ERROR tests.py::test_valkey_expiration - sqlite3.OperationalError: table "aut...
ERROR tests.py::test_valkey_clear_single_key - sqlite3.OperationalError: tabl...
ERROR tests.py::test_valkey_pattern_clear - sqlite3.OperationalError: table "...
ERROR tests.py::test_valkey_complex_data - sqlite3.OperationalError: table "a...
ERROR tests.py::test_valkey_get_or_set - sqlite3.OperationalError: table "aut...
ERROR tests.py::test_valkey_async_operations - sqlite3.OperationalError: tabl...
ERROR tests.py::test_valkey_prefix - sqlite3.OperationalError: table "auth_gr...
ERROR tests.py::test_valkey_nonexistent_key - sqlite3.OperationalError: table...
ERROR tests.py::test_cache_integration_expensive_computation - sqlite3.Operat...
ERROR tests.py::test_cache_integration_session_like_data - sqlite3.Operationa...
ERROR tests.py::test_cache_integration_api_response_caching - sqlite3.Operati...
ERROR tests.py::test_cache_integration_multi_key_invalidation - sqlite3.Opera...
ERROR tests.py::test_cache_integration_concurrent_requests - sqlite3.Operatio...
ERROR tests.py::test_cache_integration_cache_warming - sqlite3.OperationalErr...
ERROR tests.py::test_prometheus_metrics_endpoint_exists - sqlite3.Operational...
ERROR tests.py::test_prometheus_custom_metrics_defined - sqlite3.OperationalE...
ERROR tests.py::test_prometheus_decorator_tracks_requests - sqlite3.Operation...
ERROR tests.py::test_prometheus_tracks_multiple_requests - sqlite3.Operationa...
ERROR tests.py::test_prometheus_duration_histogram - sqlite3.OperationalError...
ERROR tests.py::test_prometheus_tracks_different_endpoints - sqlite3.Operatio...
ERROR tests.py::test_prometheus_metrics_labels - sqlite3.OperationalError: ta...
ERROR tests.py::test_prometheus_decorator_availability - sqlite3.OperationalE...
ERROR tests.py::test_prometheus_metrics_persistence_across_requests - sqlite3...
ERROR tests.py::test_prometheus_environment_variable_support - sqlite3.Operat...
ERROR tests.py::test_homepage_shows_posts - sqlite3.OperationalError: table "...
ERROR tests.py::test_view_single_post - sqlite3.OperationalError: table "auth...
ERROR tests.py::test_view_single_post_with_comments - sqlite3.OperationalErro...
ERROR tests.py::test_view_nonexistent_post - sqlite3.OperationalError: table ...
ERROR tests.py::test_new_post_page_as_admin - sqlite3.OperationalError: table...
ERROR tests.py::test_create_post_via_form - sqlite3.OperationalError: table "...
ERROR tests.py::test_create_post_missing_title - sqlite3.OperationalError: ta...
ERROR tests.py::test_create_post_missing_text - sqlite3.OperationalError: tab...
ERROR tests.py::test_comment_form_shown_to_authenticated_user - sqlite3.Opera...
ERROR tests.py::test_comment_form_hidden_from_unauthenticated - sqlite3.Opera...
ERROR tests.py::test_create_comment_via_form - sqlite3.OperationalError: tabl...
ERROR tests.py::test_comments_reverse_chronological - sqlite3.OperationalErro...
ERROR tests.py::test_regular_user_cannot_access_new_post - sqlite3.Operationa...
ERROR tests.py::test_admin_group_membership - sqlite3.OperationalError: table...
ERROR tests.py::test_user_has_many_posts - sqlite3.OperationalError: table "a...
ERROR tests.py::test_post_belongs_to_user - sqlite3.OperationalError: table "...
ERROR tests.py::test_post_has_many_comments - sqlite3.OperationalError: table...
ERROR tests.py::test_comment_belongs_to_post - sqlite3.OperationalError: tabl...
ERROR tests.py::test_error_endpoint_raises_exception - sqlite3.OperationalErr...
ERROR tests.py::test_error_division_endpoint - sqlite3.OperationalError: tabl...
ERROR tests.py::test_nonexistent_route_404 - sqlite3.OperationalError: table ...
ERROR tests.py::test_special_characters_in_post - sqlite3.OperationalError: t...
ERROR tests.py::test_session_persists_across_requests - sqlite3.OperationalEr...
ERROR tests.py::test_session_contains_user_data - sqlite3.OperationalError: t...
ERROR tests.py::test_csrf_token_in_session - sqlite3.OperationalError: table ...
============================== 83 errors in 3.74s ==============================
[0;31m❌ Application tests failed[0m

[0;34m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━[0m
[0;31m❌ Some tests failed[0m
[0;34m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━[0m
